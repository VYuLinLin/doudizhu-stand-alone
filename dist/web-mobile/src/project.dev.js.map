{"version":3,"sources":["assets/servers/ddzServers/AILogic.js","assets/scripts/common/DataNotify.js","assets/scripts/common/api.js","assets/scripts/common/audioManager.js","assets/servers/ddzServers/carder.js","assets/scripts/gameScene/prefabs/card.js","assets/scripts/common/common.js","assets/scripts/hallscene/prefabs_script/creatRoom.js","assets/scripts/data/ddzConstants.js","assets/scripts/data/ddzData.js","assets/servers/ddzServers/ddzServers.js","assets/scripts/util/event_lister.js","assets/servers/ddzServers/gameRule.js","assets/scripts/gameScene/gameScene.js","assets/scripts/gameScene/gamebeforeUI.js","assets/scripts/gameScene/gameingUI.js","assets/scripts/hallscene/hallScene.js","assets/scripts/hallscene/prefabs_script/joinRoom.js","assets/scripts/common/loadingLayer.js","assets/scripts/loginscene/loginScene.js","assets/scripts/mygolbal.js","assets/scripts/gameScene/prefabs/player_node.js","assets/scripts/data/player.js","assets/scripts/data/socket_ctr.js","assets/scripts/start.js","assets/migration/use_v2.0.x_cc.Toggle_event.js","assets/scripts/util/waitnode.js"],"names":["AILogic","p","this","player","cards","cardList","slice","analyse","AICardType","val","prototype","follow","winc","isWinnerIsLandlord","winnerCardCount","self","log","result","cardKind","G","gameRule","ONE","one","matchCards","_one","isLandlord","i","length","size","times","_pairs","c","PAIRS","pairs","_progressionPairs","j","pairsFromPP","splice","_three","THREE","THREE_WITH_ONE","three","minCards","minOne","push","THREE_WITH_PAIRS","concat","PROGRESSION","_progression","setCardKind","valDiff","sizeDiff","shift","pop","PROGRESSION_PAIRS","PLANE","minPlane","PLANE_WITH_ONE","cnt","plane","currOneVal","PLANE_WITH_PAIRS","currPairsVal","BOMB","bomb","_bomb","_kingBomb","KING_BOMB","FOUR_WITH_TWO","FOUR_WITH_TWO_PAIRS","nextPlayer","play","landlordCardsCnt","cardsWithMin","idx","minCard","_i","_i2","_i3","_i4","_plane","shape","_i5","_i6","r","len","playOneAtTheEnd","maxCards","prompt","stat","valCount","promptList","setPrompt","winVal","st","count","sort","promptSort","_i7","_j","getPlanePrompt","n","proList","threePrompt","onePrompt","pairsPrompt","getMinVal","v","target","targetWob","targetWobt","targetWobp","targetWobpp","cardSort","isKingBomb","list","moveItem","judgeThree","judgePlane","_i8","judgeProgression","judgeProgressionPairs","_i9","obj","fromIndex","planeCards","k","saveProgression","progression","joinProgression","unshift","temp","_i10","saveProgressionPairs","progressionPairs","src","dest","kind","max","notEq","oneFromPairs","offPairs","deleteOne","card","judgeScore","score","console","info","userId","a","b","t","threeCount","module","exports","DataNotify","cc","Class","ctor","data","arguments","_listeners","setData","addListener","callback","assert","listener","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_listener","value","err","removeListener","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","js","array","remove","getData","_data","_oldData","_tryBindArrayFunction","update","Array","arrProto","Object","create","forEach","method","defineProperty","apply","__proto__","_this","element","call","statics","dataName","defaultData","dataNotify","get","set","factory","host","name","def","api","_MusicId","_LastMusicClip","_PauseMusic","isPlayedAudio","_effectVolume","PlayMusic","clip","finished","MusicClip","audioEngine","stopAll","musicId","playMusic","setFinishCallback","StopMusic","stopMusic","HidePagePause","setVolume","pause","error","ShowPageResume","resume","PauseMusic","ResumeMusic","setMusicVolume","setEffectVolume","PlayEffect","audioId","playEffect","PlayEffectGirlSound","StopEffect","id","stop","ToggleMusic","toggle","isChecked","isMusicPlaying","ToggleEffects","cardobj","king","that","index","cardvalue","A","2","3","4","5","6","7","8","9","10","J","Q","K","CardShape","S","H","C","D","Kings","kx","Kd","carder","card_list","shuffleCard","randomIndex","Math","floor","random","tmpCard","creatleCard","iv","_card","splitThreeCards","threeCards","hasOwnProperty","isOneCard","IsDoubleCard","card_data","Isthree","IsThreeAndOne","IsThreeAndTwo","IsBoom","map","keys","IsKingBoom","IsPlan","key","p1","Number","p2","abs","IsPlanWithSing","three_list","sing_count","IsPlanWithDouble","double_count","IsShunzi","tmp_cards","x","y","IsLianDui","CardsValue","double","boom","threeWithOne","threeWithTwo","planeWithOne","planeWithTwo","scroll","doubleScroll","kingboom","compareOne","cardA","cardB","valueA","valueB","compareDouble","compareThree","compareBoom","compareBoomKing","comparePlanWithSing","lista","listb","comparePlanWithTow","mapA","mapB","listA","listB","comparePlan","maxNum","comparePlaneWithOne","comparePlaneWithDouble","JSON","stringify","compareScroll","minNumA","minNumB","compareDoubleScroll","compare","current_card_value","compareWithCard","last_cards","current_cards","card_last_value","getCardValue","card_current_value","IsCanPushs","DoubleScroll","_mygolbal","_interopRequireDefault","require","ddzData","ddzConstants","extends","Component","properties","cards_sprite_atlas","SpriteAtlas","onLoad","flag","offset_y","node","on","event","bind","runToCenter","start","init_data","setTouchEvent","playerData","Node","EventType","TOUCH_START","gameState","PLAYING","caardIndex","$socket","emit","showCards","cardValue","12","13","1","11","cardShape","kings","14","15","spriteKey","getComponent","Sprite","spriteFrame","getSpriteFrame","audioManager","common","audio","getRandomStr","str","lower","upper","round","onBtnClose","destroy","onButtonClick","_defines$jdRoomConfig","defines","jdRoomConfig","bottom","rate","roomId","sys","localStorage","setItem","director","loadScene","INVALID","WAITREADY","GAMESTART","PUSHCARD","ROBSTATE","SHOWBOTTOMCARD","GAMEEND","_pokersFrame","_chipsFrame","initData","gameStateNotify","parse","getItem","mygolbal","ddzServers","playersData","landlordIndex","landlordNum","robplayer","landlordId","roundWinId","winCards","initServer","gameStateHandler","canrobStateNotify","playAHandNotify","nextPlayerNotify","_otherPlayerCards","states","initPlayerList","setTimeout","setGameState","window","players","landlordData","masterId","playCard","winPlayer","nextPlayer1","nextPlayer2","isWin","otherPlayerCards","_defineProperty","state","_playersData","_mygolbal$playerData","rootList","rightPlayerId","leftPlayerId","_ref","_this2","robList","qian_state","qiang","nextId","_robList","_slicedToArray","player1","player2","player3","robNum","isOver","ai","_ref2","type","getReadyCardsKind","selfCards","typeJudge","myglobal","ownc","_default","eventLister","register","methodList","_methodList$i","args","filter","e","removeLister","removeAllLister","GameRule","isPairs","isThree","isThreeWithOne","getMaxVal","isBomb","isProgression","isProgressionPairs","isThreeWithPairs","isPlane","isPlaneWithOne","isPlaneWithPairs","isFourWithTwo","isFourWithPairs","threeList","pairsList","groupCount","min","delta","addCount","va","parseInt","vb","MSG_NO_SELECT","MSG_ERROR_TYPE","MSG_NO_ROROB_RESTART","DESK_STATUS_READY","DESK_STATUS_ROB","DESK_STATUS_PLAY","bjMusic","AudioClip","default","di_label","Label","beishu_label","roomid_label","player_node_prefabs","Prefab","btn_ready","players_seat_pos","gameUiNode","playerNodeList","_roomId$split","split","_roomId$split2","string","roomNames","active","isopen_sound","addPlayerNode","masterNotify","onDestroy","masterUserId","onGoback","onBtnReadey","player_data","seatindex","playernode_inst","instantiate","parent","children","getUserOutCardPosByAccount","node_script","seat_node","seat_index","getChildByName","getUserNodeByAccount","playerNode","customData","socket","requestStart","gameingUI","card_prefab","robUI","timeLabel","cardsNode","bottom_card_pos_node","playingUI_node","tipsLabel","loseNode","winNode","fapaiAudio","jiaodizhuAudio","buqiangAudio","cardsAudio","buyaoAudio","chupaiAudio","cards_nods","card_width","bottom_card","bottom_card_data","choose_card_data","outcar_zone","push_card_tmp","show_data","call_data","run","callFunc","activedata","show_card","runAction","sequence","rotateBy","scaleBy","scheduleOnce","pushThreeCard","_chooseCardNotify","_unchooseCardNotify","pushCardNotify","canrobNotify","selfPlayAHandNotify","rootPlayAHandNotify","gameEndNotify","cardData","cardId","removeAllChildren","cur_index_card","pushCard","_runactive_pushcard","fapai_audioID","move_node","newx","action","moveTo","v2","customSchedulerOnce","unschedule","buqiang","schedule","clearOutZone","gameScene_script","outCard_node","node_cards","delay","schedulerOnce","appendOtherCardsToOutZone","subtractCards","sortCard","timeout","zIndex","width","scale","di_card","schedulePushThreeCard","updateCards","last_card_x","destoryCard","choose_card","destroy_card","removeFromParent","appendCardsToOutZone","pushCardSort","yoffset","addChild","zPoint","cardNode","getChildren","setScale","setPosition","zeroPoint","playPushCardSound","card_name","url","raw","_ref3","nickname_label","headimage","gobal_count","creatroom_prefabs","joinroom_prefabs","userName","creator_Room","join_Room","onBtnJingdian","onBtnLaizi","alert","joinids","joinid","cur_input_count","room_para","request_jion","substring","LoadingLayer","__preload","init","view","resizeWithBrowserSize","setResizeCallback","resizeCallback","Director","EVENT_AFTER_SCENE_LAUNCH","game","addPersistRootNode","_myglobal$playerData","canvas","find","Canvas","winSize","designResolution","height","fitWidth","fitHeight","wait_node","onButtonCilck","request_wxLogin","uniqueID","avatarUrl","goldcount","_socket_ctr","_player","_event_lister","eventlister","headImage","globalcount_label","readyimage","card_node","clockimage","qiangdidzhu_node","time_label","robimage_sp","SpriteFrame","robnoimage_sp","robIconSp","robIcon_Sp","robnoIcon_Sp","masterIcon","jiaodizhu","getGameScene","cardlist_node","head_image_path","loader","loadRes","message","isQdz","fn","seconds","countLabel","userData","rootId1","rootId2","socketCtr","respone_map","call_index","_socket","_sendmsg","cmdtype","req","callindex","cmd","_request","initSocket","opts","reconnection","force new connection","transports","io","connect","serverUrl","res","callBackIndex","request_creatroom","request_enter_room","request_buchu_card","request_chu_card","onPlayerJoinRoom","onPlayerReady","onGameStart","onChangeHouseManage","requestReady","requestRobState","onPushCards","onCanRobState","onRobState","onChangeMaster","onShowBottomCard","onCanChuCard","onRoomChangeState","onOtherPlayerChuCard","Toggle","_triggerEventInScript_check","loadimage_target","_isShow","lblContent","dt","rotation","show","content","hide"],"mappings":"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","sourcesContent":["/**\r\n * AI逻辑\r\n *\r\n */\r\nconst AILogic = function (p) {\r\n  this.player = p;\r\n  this.cards = p.cardList.slice(0);\r\n  this.analyse();\r\n};\r\n// ai牌型类\r\nconst AICardType = (val, cardList) => ({val, cardList})\r\n/**\r\n * 跟牌,AI根据上家牌出牌\r\n * @method function\r\n * @param  {object} winc 当前牌面最大牌\r\n * @param  {boolean} isWinnerIsLandlord 当前最大是否是地主\r\n * @return {number} winnerCardCount 当前最大那家剩余手牌数\r\n */\r\nAILogic.prototype.follow = function (winc, isWinnerIsLandlord, winnerCardCount) {\r\n  var self = this;\r\n  self.log();\r\n  var result = (function () {\r\n    switch (winc.cardKind) {//判断牌型\r\n      case G.gameRule.ONE://单牌\r\n        var one = self.matchCards(self._one, G.gameRule.ONE, winc, isWinnerIsLandlord, winnerCardCount);\r\n        if (!one) {\r\n          if (isWinnerIsLandlord || self.player.isLandlord) {\r\n            for (var i = 0; i < self.cards.length; i++) {\r\n              if (self.cards[i].val <= 15 && self.cards[i].val > winc.val) {\r\n                return {\r\n                  cardList: self.cards.slice(i, i + 1),\r\n                  cardKind: G.gameRule.ONE,\r\n                  size: 1,\r\n                  val: self.cards[i].val\r\n                };\r\n              }\r\n            }\r\n          }\r\n          if (self.times <= 1 && self._pairs.length > 0 && self._pairs[0].val > 10) {//剩下一对大于10拆牌\r\n            var c = self.cards.slice(0, 1);\r\n            if (c[0].val > winc.val) {\r\n              return {\r\n                cardList: c,\r\n                cardKind: G.gameRule.ONE,\r\n                size: 1,\r\n                val: c[0].val\r\n              };\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return one;\r\n      case G.gameRule.PAIRS://对子\r\n        var pairs = self._pairs.length > 0 ? self.matchCards(self._pairs, G.gameRule.PAIRS, winc, isWinnerIsLandlord, winnerCardCount) : null;\r\n        if (pairs == null && (isWinnerIsLandlord || self.player.isLandlord)) {//对手需要拆牌大之\r\n          //从连对中拿对\r\n          if (self._progressionPairs.length > 0) {\r\n            for (var i = self._progressionPairs.length - 1; i >= 0; i--) {\r\n              if (winc.val >= self._progressionPairs[i].val) continue;\r\n              for (var j = self._progressionPairs[i].cardList.length - 1; j >= 0; j -= 2) {\r\n                if (self._progressionPairs[i].cardList[j].val > winc.val) {\r\n                  var pairsFromPP = self._progressionPairs[i].cardList.splice(j - 1, 2);\r\n                  return {\r\n                    cardList: pairsFromPP,\r\n                    cardKind: G.gameRule.PAIRS,\r\n                    size: 2,\r\n                    val: pairsFromPP[0].val\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          } else if (self._three.length > 0) {\r\n            for (var i = self._three.length - 1; i >= 0; i--) {\r\n              if (self._three[i].val > winc.val) {\r\n                return {\r\n                  cardList: self._three[i].cardList.slice(0, 2),\r\n                  cardKind: G.gameRule.PAIRS,\r\n                  size: 2,\r\n                  val: self._three[i].val\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return pairs;\r\n      case G.gameRule.THREE://三根\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        return self.matchCards(self._three, G.gameRule.THREE, winc, isWinnerIsLandlord, winnerCardCount);\r\n\r\n      case G.gameRule.THREE_WITH_ONE://三带一\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        var three = self.minCards(self._three, G.gameRule.THREE, winc.val);\r\n        if (three) {\r\n          var one = self.minOne(2, three.val);\r\n          if (!one) {\r\n            return null;\r\n          } else {\r\n            three.cardList.push(one);\r\n          }\r\n          three.cardKind = G.gameRule.THREE_WITH_ONE;\r\n          three.size = 4;\r\n        }\r\n        return three;\r\n\r\n      case G.gameRule.THREE_WITH_PAIRS: //三带一对\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        var three = self.minCards(self._three, G.gameRule.THREE, winc.val);\r\n        if (three) {\r\n          var pairs = self.minCards(self._pairs, G.gameRule.PAIRS);\r\n          while (true) {//避免对子三根重叠\r\n            if (pairs.cardList[0].val === three.val) {\r\n              pairs = self.minCards(self._pairs, G.gameRule.PAIRS, pairs.cardList[0].val);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n          if (pairs) {\r\n            three.cardList = three.cardList.concat(pairs.cardList);\r\n          } else {\r\n            return null;\r\n          }\r\n          three.cardKind = G.gameRule.THREE_WITH_PAIRS;\r\n          three.size = 5;\r\n        }\r\n        return three;\r\n\r\n      case G.gameRule.PROGRESSION://顺子\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        if (self._progression.length > 0) {\r\n          for (var i = self._progression.length - 1; i >= 0; i--) {//从小值开始判断\r\n            if (winc.val < self._progression[i].val && winc.size <= self._progression[i].cardList.length) {\r\n              if (winc.size === self._progression[i].cardList.length) {\r\n                return self.setCardKind(self._progression[i], G.gameRule.PROGRESSION);\r\n              } else {\r\n                if (self.player.isLandlord || isWinnerIsLandlord) {\r\n                  var valDiff = self._progression[i].val - winc.val,\r\n                    sizeDiff = self._progression[i].cardList.length - winc.size;\r\n                  for (var j = 0; j < sizeDiff; j++) {//拆顺\r\n                    if (valDiff > 1) {\r\n                      self._progression[i].cardList.shift();\r\n                      self._progression[i].val--;\r\n                      valDiff--;\r\n                      continue;\r\n                    }\r\n                    self._progression[i].cardList.pop();\r\n                  }\r\n                  return self.setCardKind(self._progression[i], G.gameRule.PROGRESSION);\r\n                } else {\r\n                  return null;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n\r\n      case G.gameRule.PROGRESSION_PAIRS://连对\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        if (self._progressionPairs.length > 0) {\r\n          for (var i = self._progressionPairs.length - 1; i >= 0; i--) {//从小值开始判断\r\n            if (winc.val < self._progressionPairs[i].val && winc.size <= self._progressionPairs[i].cardList.length) {\r\n              if (winc.size === self._progressionPairs[i].cardList.length) {\r\n                return self.setCardKind(self._progressionPairs[i], G.gameRule.PROGRESSION_PAIRS);\r\n              } else {\r\n                if (self.player.isLandlord || isWinnerIsLandlord) {\r\n                  var valDiff = self._progressionPairs[i].val - winc.val,\r\n                    sizeDiff = (self._progressionPairs[i].cardList.length - winc.size) / 2;\r\n                  for (var j = 0; j < sizeDiff; j++) {//拆顺\r\n                    if (valDiff > 1) {\r\n                      self._progressionPairs[i].cardList.shift();\r\n                      self._progressionPairs[i].cardList.shift();\r\n                      valDiff--;\r\n                      continue;\r\n                    }\r\n                    self._progressionPairs[i].cardList.pop();\r\n                    self._progressionPairs[i].cardList.pop();\r\n                  }\r\n                  return self.setCardKind(self._progressionPairs[i], G.gameRule.PROGRESSION_PAIRS);\r\n                } else {\r\n                  return null;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n\r\n      case G.gameRule.PLANE://三顺\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        return self.minPlane(winc.size, winc);\r\n      case G.gameRule.PLANE_WITH_ONE: //飞机带单\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        var cnt = winc.size / 4,\r\n          plane = self.minPlane(cnt * 3, winc);\r\n        if (plane) {\r\n          var currOneVal = 2;\r\n          for (var i = 0; i < cnt; i++) {\r\n            var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n            if (one) {\r\n              plane.cardList.push(one);\r\n              currOneVal = one.val;\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n          plane.cardKind = G.gameRule.PLANE_WITH_ONE;\r\n          plane.size = plane.cardList.length;\r\n        }\r\n        return plane;\r\n      case G.gameRule.PLANE_WITH_PAIRS://飞机带对\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {\r\n          return null;\r\n        }\r\n        var cnt = winc.size / 5,\r\n          plane = self.minPlane(cnt * 3, winc);\r\n        if (plane) {\r\n          var currPairsVal = 2;\r\n          for (var i = 0; i < cnt; i++) {\r\n            var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n            if (pairs) {\r\n              plane.cardList = plane.cardList.concat(pairs.cardList);\r\n              currPairsVal = pairs.val;\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n          plane.cardKind = G.gameRule.PLANE_WITH_PAIRS;\r\n          plane.size = plane.cardList.length;\r\n        }\r\n        return plane;\r\n\r\n      case G.gameRule.BOMB://炸弹\r\n        if (!isWinnerIsLandlord && !self.player.isLandlord) {//同是农民不压炸弹\r\n          return null;\r\n        }\r\n        var bomb = self.minCards(self._bomb, G.gameRule.BOMB, winc.val);\r\n        if (bomb) {\r\n          return bomb;\r\n        } else {\r\n          if (self._kingBomb.length > 0) {\r\n            if ((isWinnerIsLandlord && winnerCardCount < 6)\r\n              || (self.player.isLandlord && self.player.cardList.length < 6)) {\r\n              return self.setCardKind(self._kingBomb[0], G.gameRule.KING_BOMB);\r\n            }\r\n          }\r\n          return null;\r\n        }\r\n      case G.gameRule.FOUR_WITH_TWO:\r\n        return self.minCards(self._bomb, G.gameRule.BOMB, winc.val);\r\n      case G.gameRule.FOUR_WITH_TWO_PAIRS:\r\n        return self.minCards(self._bomb, G.gameRule.BOMB, winc.val);\r\n      case G.gameRule.KING_BOMB:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  })();\r\n\r\n  //如果有炸弹，根据牌数量确定是否出\r\n  if (result) {\r\n    return result;\r\n  } else if (winc.cardKind != G.gameRule.BOMB && winc.cardKind != G.gameRule.KING_BOMB\r\n    && (self._bomb.length > 0 || self._kingBomb.length > 0)) {\r\n    if ((isWinnerIsLandlord && winnerCardCount < 5)\r\n      || (self.player.isLandlord && (self.player.cardList.length < 5 || (self.player.nextPlayer.cardList.length < 5 || self.player.nextPlayer.nextPlayer.cardList.length < 6)))\r\n      || self.times() <= 2) {//自己只有两手牌或只有炸弹必出炸弹\r\n      if (self._bomb.length > 0) {\r\n        return self.minCards(self._bomb, G.gameRule.BOMB);\r\n      } else {\r\n        return self.setCardKind(self._kingBomb[0], G.gameRule.KING_BOMB);\r\n      }\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 出牌,默认出包含最小牌的牌\r\n * @method function\r\n * @return {array} [description]\r\n */\r\nAILogic.prototype.play = function (landlordCardsCnt) {\r\n  var self = this;\r\n  self.log();\r\n  var cardsWithMin = function (idx) {\r\n    var minCard = self.cards[idx];\r\n    //在单根里找\r\n    for (var i = 0; i < self._one.length; i++) {\r\n      if (self._one[i].val === minCard.val) {\r\n        return self.minCards(self._one, G.gameRule.ONE);\r\n      }\r\n    }\r\n    //对子里找\r\n    for (let i = 0; i < self._pairs.length; i++) {\r\n      if (self._pairs[i].val === minCard.val) {\r\n        return self.minCards(self._pairs, G.gameRule.PAIRS);\r\n      }\r\n    }\r\n    //三根里找\r\n    for (let i = 0; i < self._three.length; i++) {\r\n      if (self._three[i].val === minCard.val) {\r\n        return self.minCards(self._three, G.gameRule.THREE);\r\n      }\r\n    }\r\n    //炸弹里找\r\n    for (let i = 0; i < self._bomb.length; i++) {\r\n      if (self._bomb[i].val === minCard.val) {\r\n        return self.minCards(self._bomb, G.gameRule.BOMB);\r\n      }\r\n    }\r\n    //三顺里找\r\n    for (let i = 0; i < self._plane.length; i++) {\r\n      for (var j = 0; j < self._plane[i].cardList.length; j++) {\r\n        if (self._plane[i].cardList[j].val === minCard.val && self._plane[i].cardList[j].shape === minCard.shape) {\r\n          return self.minCards(self._plane, G.gameRule.PLANE);\r\n        }\r\n      }\r\n    }\r\n    //顺子里找\r\n    for (let i = 0; i < self._progression.length; i++) {\r\n      for (var j = 0; j < self._progression[i].cardList.length; j++) {\r\n        if (self._progression[i].cardList[j].val === minCard.val && self._progression[i].cardList[j].shape === minCard.shape) {\r\n          return self.minCards(self._progression, G.gameRule.PROGRESSION);\r\n        }\r\n      }\r\n    }\r\n    //连对里找\r\n    for (let i = 0; i < self._progressionPairs.length; i++) {\r\n      for (var j = 0; j < self._progressionPairs[i].cardList.length; j++) {\r\n        if (self._progressionPairs[i].cardList[j].val === minCard.val && self._progressionPairs[i].cardList[j].shape === minCard.shape) {\r\n          return self.minCards(self._progressionPairs, G.gameRule.PROGRESSION_PAIRS);\r\n        }\r\n      }\r\n    }\r\n    if (self._kingBomb.length > 0) {\r\n      return self.minCards(self._kingBomb, G.gameRule.KING_BOMB);\r\n    }\r\n  };\r\n  for (var i = self.cards.length - 1; i >= 0; i--) {\r\n    var r = cardsWithMin(i);\r\n    if (r.cardKind === G.gameRule.ONE) {\r\n      if (self._plane.length > 0) {//三顺\r\n        var plane = self.minCards(self._plane, G.gameRule.PLANE);\r\n        var len = plane.cardList.length / 3;\r\n        var currOneVal = 2;\r\n        for (var i = 0; i < len; i++) {\r\n          var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n          plane.cardList.push(one);\r\n          currOneVal = one.val;\r\n        }\r\n        return self.setCardKind(plane, G.gameRule.PLANE_WITH_ONE);\r\n      }\r\n      else if (self._three.length > 0) {//三带一\r\n        var three = self.minCards(self._three, G.gameRule.THREE);\r\n        var len = three.cardList.length / 3;\r\n        var one = self.minOne(currOneVal, three.val);//拿一张单牌\r\n        three.cardList.push(one);\r\n        if (three.val < 14)\r\n          return self.setCardKind(three, G.gameRule.THREE_WITH_ONE);\r\n      }\r\n      if (self.player.isLandlord) {//坐庄打法\r\n        if (self.player.isLandlord) {//坐庄打法\r\n          if (self.player.nextPlayer.cardList.length <= 2 || self.player.nextPlayer.nextPlayer.cardList.length <= 2)\r\n            return self.playOneAtTheEnd(landlordCardsCnt);\r\n          else\r\n            return self.minCards(self._one, G.gameRule.ONE);\r\n        }\r\n      } else {//偏家打法\r\n        if (landlordCardsCnt <= 2)\r\n          return self.playOneAtTheEnd(landlordCardsCnt);\r\n        else\r\n          return self.minCards(self._one, G.gameRule.ONE);\r\n      }\r\n    } else if (r.cardKind === G.gameRule.THREE) {\r\n      var three = self.minCards(self._three, G.gameRule.THREE);\r\n      var len = three.cardList.length / 3;\r\n      if (self._one.length > 0) {//单根多带单\r\n        var one = self.minOne(currOneVal, three.val);//拿一张单牌\r\n        three.cardList.push(one);\r\n        return self.setCardKind(three, G.gameRule.THREE_WITH_ONE);\r\n      } else if (self._pairs.length > 0) {\r\n        var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n        three.cardList = three.cardList.concat(pairs.cardList);\r\n        return self.setCardKind(three, G.gameRule.THREE_WITH_PAIRS);\r\n      } else {\r\n        return self.setCardKind(three, G.gameRule.THREE);\r\n      }\r\n    } else if (r.cardKind === G.gameRule.PLANE) {\r\n      var plane = self.minCards(self._plane, G.gameRule.PLANE);\r\n      var len = plane.cardList.length / 3;\r\n      if (self._one.length > len && self._pairs.length > len) {\r\n        if (self._one.length >= self._pairs.length) {//单根多带单\r\n          var currOneVal = 2;\r\n          for (var i = 0; i < len; i++) {\r\n            var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n            plane.cardList.push(one);\r\n            currOneVal = one.val;\r\n          }\r\n          return self.setCardKind(plane, G.gameRule.PLANE_WITH_ONE);\r\n        } else {\r\n          var currPairsVal = 2;\r\n          for (var i = 0; i < len; i++) {\r\n            var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n            plane.cardList = plane.cardList.concat(pairs.cardList);\r\n            currPairsVal = pairs.val;\r\n          }\r\n          return self.setCardKind(plane, G.gameRule.PLANE_WITH_PAIRS);\r\n        }\r\n      } else if (self._pairs.length > len) {\r\n        var currPairsVal = 2;\r\n        for (var i = 0; i < len; i++) {\r\n          var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n          plane.cardList = plane.cardList.concat(pairs.cardList);\r\n          currPairsVal = pairs.val;\r\n        }\r\n        return self.setCardKind(plane, G.gameRule.PLANE_WITH_PAIRS);\r\n      } else if (self._one.length > len) {\r\n        var currOneVal = 2;\r\n        for (var i = 0; i < len; i++) {\r\n          var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n          plane.cardList.push(one);\r\n          currOneVal = one.val;\r\n        }\r\n        return self.setCardKind(plane, G.gameRule.PLANE_WITH_ONE);\r\n      } else {\r\n        return self.setCardKind(plane, G.gameRule.PLANE);\r\n      }\r\n    } else if (r.cardKind === G.gameRule.BOMB && self.times() === 1) {\r\n      return r;\r\n    } else if (r.cardKind === G.gameRule.BOMB && self.times() != 1) {\r\n      continue;\r\n    } else {\r\n      return r;\r\n    }\r\n  }\r\n};\r\n//出牌将单根放最后出牌\r\nAILogic.prototype.playOneAtTheEnd = function (landlordCardsCnt) {\r\n  var self = this;\r\n  if (self._progression.length > 0) {//出顺子\r\n    return self.minCards(self._progression, G.gameRule.PROGRESSION);\r\n  }\r\n  else if (self._plane.length > 0) {//三顺\r\n    var plane = self.minCards(self._plane, G.gameRule.PLANE);\r\n    var len = plane.cardList.length / 3;\r\n    if (self._one.length > len && self._pairs.length > len) {\r\n      if (self._one.length >= self._pairs.length) {//单根多带单\r\n        var currOneVal = 2;\r\n        for (var i = 0; i < len; i++) {\r\n          var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n          plane.cardList.push(one);\r\n          currOneVal = one.val;\r\n        }\r\n        return self.setCardKind(plane, G.gameRule.PLANE_WITH_ONE);\r\n      } else {\r\n        var currPairsVal = 2;\r\n        for (var i = 0; i < len; i++) {\r\n          var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n          plane.cardList = plane.cardList.concat(pairs.cardList);\r\n          currPairsVal = pairs.val;\r\n        }\r\n        return self.setCardKind(plane, G.gameRule.PLANE_WITH_PAIRS);\r\n      }\r\n    } else if (self._pairs.length > len) {\r\n      var currPairsVal = 2;\r\n      for (var i = 0; i < len; i++) {\r\n        var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n        plane.cardList = plane.cardList.concat(pairs.cardList);\r\n        currPairsVal = pairs.val;\r\n      }\r\n      return self.setCardKind(plane, G.gameRule.PLANE_WITH_PAIRS);\r\n    } else if (self._one.length > len) {\r\n      var currOneVal = 2;\r\n      for (var i = 0; i < len; i++) {\r\n        var one = self.minOne(currOneVal, plane.val);//拿一张单牌\r\n        plane.cardList.push(one);\r\n        currOneVal = one.val;\r\n      }\r\n      return self.setCardKind(plane, G.gameRule.PLANE_WITH_ONE);\r\n    } else {\r\n      return self.setCardKind(plane, G.gameRule.PLANE);\r\n    }\r\n  }\r\n  else if (self._progressionPairs.length > 0) {//出连对\r\n    return self.minCards(self._progressionPairs, G.gameRule.PROGRESSION_PAIRS);\r\n  }\r\n  else if (self._three.length > 0) {//三根、三带一、三带对\r\n    var three = self.minCards(self._three, G.gameRule.THREE);\r\n    var len = three.cardList.length / 3;\r\n    if (self._one.length >= 0) {//单根多带单\r\n      var one = self.minOne(currOneVal, three.val);//拿一张单牌\r\n      three.cardList.push(one);\r\n      return self.setCardKind(three, G.gameRule.THREE_WITH_ONE);\r\n    } else if (self._pairs.length > 0) {\r\n      var pairs = self.minCards(self._pairs, G.gameRule.PAIRS, currPairsVal);//拿一对\r\n      three.cardList = three.cardList.concat(pairs.cardList);\r\n      return self.setCardKind(three, G.gameRule.THREE_WITH_PAIRS);\r\n    } else {\r\n      return self.setCardKind(three, G.gameRule.THREE);\r\n    }\r\n  }\r\n  else if (self._pairs.length > 0) {//对子\r\n    if ((self.player.isLandlord && (self.player.nextPlayer.cardList.length === 2 || self.player.nextPlayer.nextPlayer.cardList.length === 2))\r\n      || (!self.player.isLandlord && landlordCardsCnt === 2))\r\n      return self.maxCards(self._pairs, G.gameRule.PAIRS);\r\n    else\r\n      return self.minCards(self._pairs, G.gameRule.PAIRS);\r\n  }\r\n  else if (self._one.length > 0) {//出单牌\r\n    if ((self.player.isLandlord && (self.player.nextPlayer.cardList.length <= 2 || self.player.nextPlayer.nextPlayer.cardList.length <= 2))\r\n      || (!self.player.isLandlord && landlordCardsCnt <= 2))\r\n      return self.maxCards(self._one, G.gameRule.ONE);\r\n    else\r\n      return self.minCards(self._one, G.gameRule.ONE);\r\n  } else {//都计算无结果出最小的那张牌\r\n    var one = null;\r\n    if ((self.player.isLandlord && (self.player.nextPlayer.cardList.length <= 2 || self.player.nextPlayer.nextPlayer.cardList.length <= 2))\r\n      || (!self.player.isLandlord && landlordCardsCnt <= 2))\r\n      one = self.cards.slice(self.cards.length - 1, self.cards.length);\r\n    else\r\n      one = self.cards.slice(0, 1);\r\n    return {\r\n      size: 1,\r\n      cardKind: G.gameRule.ONE,\r\n      cardList: one,\r\n      val: one[0].val\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * 玩家出牌提示\r\n * @method prompt\r\n * @param  {object} winc 当前牌面最大牌\r\n * @return {Array}      提示结果\r\n */\r\nAILogic.prototype.prompt = function (winc) {\r\n  var self = this,\r\n    stat = G.gameRule.valCount(self.cards);\r\n\r\n  if (winc) {//跟牌\r\n    var promptList = [];\r\n    /**\r\n     * 设置符合条件的提示牌\r\n     * @method function\r\n     * @param  {int} c 几张的牌，比如单牌：1，对子：2\r\n     * @param  {int} winVal 要求大过的值\r\n     * @param  {array} st 牌统计\r\n     */\r\n    var setPrompt = function (c, winVal, st) {\r\n      var result = [];\r\n      //除去不能大过当前的牌\r\n      for (var i = st.length - 1; i >= 0; i--) {\r\n        if (st[i].count < c || st[i].val <= winVal) {\r\n          st.splice(i, 1);\r\n        }\r\n      }\r\n      st.sort(self.promptSort);\r\n      //加入各个符合值的单牌\r\n      for (let i = 0; i < st.length; i++) {\r\n        for (let j = 0; j < self.cards.length; j++) {\r\n          if (self.cards[j].val === st[i].val) {\r\n            result.push(self.cards.slice(j, j + c));\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n    /**\r\n     * 获取三顺提示牌\r\n     * @method function\r\n     * @param  {int} n 数量(有几个三根)\r\n     */\r\n    var getPlanePrompt = function (n) {\r\n      var result = [];\r\n      if (winc.val < 14 && self.cards.length >= winc.size) {//不是最大顺子才有的比\r\n        for (var i = winc.val + 1; i < 15; i++) {\r\n          var proList = [];\r\n          for (var j = 0; j < self.cards.length; j++) {\r\n            if (self.cards[j].val < i && proList.length === 0) break;\r\n            if (self.cards[j].val > i || (proList.length > 0 && self.cards[j].val === proList[proList.length - 1].val)) {\r\n              continue;\r\n            }\r\n            if (self.cards[j].val === i\r\n              && self.cards[j + 1]\r\n              && self.cards[j + 1].val === i\r\n              && self.cards[j + 2]\r\n              && self.cards[j + 2].val === i\r\n              && proList.length === 0) {\r\n              proList = proList.concat(self.cards.slice(j, j + 3));\r\n              j += 2;\r\n              continue;\r\n            }\r\n            if (proList.length > 0\r\n              && proList[proList.length - 1].val - 1 === self.cards[j].val\r\n              && self.cards[j + 1]\r\n              && proList[proList.length - 1].val - 1 === self.cards[j + 1].val\r\n              && self.cards[j + 2]\r\n              && proList[proList.length - 1].val - 1 === self.cards[j + 2].val) {//判定递减\r\n              proList = proList.concat(self.cards.slice(j, j + 3));\r\n              j += 2;\r\n              if (proList.length === n * 3) {\r\n                result.push(proList);\r\n                break;\r\n              }\r\n            } else { break; }\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n    switch (winc.cardKind) {\r\n      case G.gameRule.ONE://单牌\r\n        promptList = setPrompt(1, winc.val, stat);\r\n        break;\r\n      case G.gameRule.PAIRS://对子\r\n        promptList = setPrompt(2, winc.val, stat);\r\n        break;\r\n      case G.gameRule.THREE://三根\r\n        promptList = setPrompt(3, winc.val, stat);\r\n        break;\r\n      case G.gameRule.THREE_WITH_ONE://三带一\r\n        var threePrompt = setPrompt(3, winc.val, stat.slice(0)),\r\n          onePrompt = setPrompt(1, 2, stat.slice(0));\r\n        for (var i = 0; i < threePrompt.length; i++) {\r\n          for (var j = 0; j < onePrompt.length; j++) {\r\n            if (onePrompt[j][0].val != threePrompt[i][0].val) {\r\n              promptList.push(threePrompt[i].concat(onePrompt[j]));\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case G.gameRule.THREE_WITH_PAIRS://三带对\r\n        var threePrompt = setPrompt(3, winc.val, stat.slice(0)),\r\n          pairsPrompt = setPrompt(2, 2, stat.slice(0));\r\n        for (var i = 0; i < threePrompt.length; i++) {\r\n          for (var j = 0; j < pairsPrompt.length; j++) {\r\n            if (pairsPrompt[j][0].val != threePrompt[i][0].val) {\r\n              promptList.push(threePrompt[i].concat(pairsPrompt[j]));\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case G.gameRule.PROGRESSION://顺子\r\n        if (winc.val < 14 && self.cards.length >= winc.size) {//不是最大顺子才有的比\r\n          for (var i = winc.val + 1; i < 15; i++) {\r\n            var proList = [];\r\n            for (var j = 0; j < self.cards.length; j++) {\r\n              if (self.cards[j].val < i && proList.length === 0) break;\r\n              if (self.cards[j].val > i || (proList.length > 0 && self.cards[j].val === proList[proList.length - 1].val)) {\r\n                continue;\r\n              }\r\n              if (self.cards[j].val === i && proList.length === 0) {\r\n                proList.push(self.cards.slice(j, j + 1)[0]);\r\n                continue;\r\n              }\r\n              if (proList[proList.length - 1].val - 1 === self.cards[j].val) {//判定递减\r\n                proList.push(self.cards.slice(j, j + 1)[0]);\r\n                if (proList.length === winc.size) {\r\n                  promptList.push(proList);\r\n                  break;\r\n                }\r\n              } else { break; }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case G.gameRule.PROGRESSION_PAIRS://连对\r\n        if (winc.val < 14 && self.cards.length >= winc.size) {//不是最大顺子才有的比\r\n          for (var i = winc.val + 1; i < 15; i++) {\r\n            var proList = [];\r\n            for (var j = 0; j < self.cards.length; j++) {\r\n              if (self.cards[j].val < i && proList.length === 0) break;\r\n              if (self.cards[j].val > i || (proList.length > 0 && self.cards[j].val === proList[proList.length - 1].val)) {\r\n                continue;\r\n              }\r\n              if (self.cards[j].val === i && self.cards[j + 1] && self.cards[j + 1].val === i && proList.length === 0) {\r\n                proList = proList.concat(self.cards.slice(j, j + 2));\r\n                j++;\r\n                continue;\r\n              }\r\n              if (proList.length > 0\r\n                && proList[proList.length - 1].val - 1 === self.cards[j].val\r\n                && self.cards[j + 1]\r\n                && proList[proList.length - 1].val - 1 === self.cards[j + 1].val) {//判定递减\r\n                proList = proList.concat(self.cards.slice(j, j + 2));\r\n                j++;\r\n                if (proList.length === winc.size) {\r\n                  promptList.push(proList);\r\n                  break;\r\n                }\r\n              } else { break; }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case G.gameRule.PLANE://三顺\r\n        promptList = getPlanePrompt(winc.size / 3);\r\n        break;\r\n      case G.gameRule.PLANE_WITH_ONE:\r\n        promptList = getPlanePrompt(winc.size / 4);\r\n        break;\r\n      case G.gameRule.PLANE_WITH_PAIRS:\r\n        promptList = getPlanePrompt(winc.size / 5);\r\n        break;\r\n      case G.gameRule.FOUR_WITH_TWO:\r\n        promptList = setPrompt(4, winc.val, stat);\r\n        break;\r\n      case G.gameRule.FOUR_WITH_TWO_PAIRS:\r\n        promptList = setPrompt(4, winc.val, stat);\r\n        break;\r\n      case G.gameRule.BOMB:\r\n        promptList = setPrompt(4, winc.val, stat);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (winc.cardKind != G.gameRule.KING_BOMB && winc.cardKind != G.gameRule.BOMB) {\r\n      //炸弹加入\r\n      if (self._bomb.length > 0) {\r\n        for (var i = self._bomb.length - 1; i >= 0; i--) {\r\n          promptList.push(self._bomb[i].cardList);\r\n        }\r\n      }\r\n    }\r\n    if (winc.cardKind != G.gameRule.KING_BOMB) {\r\n      //王炸加入\r\n      if (self._kingBomb.length > 0) {\r\n        promptList.push(self._kingBomb[0].cardList);\r\n      }\r\n    }\r\n    return promptList;\r\n  } else {//出牌\r\n    var promptList = [];\r\n    for (var i = stat.length - 1; i >= 0; i--) {\r\n      if (i != 0) {\r\n        promptList.push(self.cards.splice(self.cards.length - stat[i].count, self.cards.length - 1));\r\n      } else {\r\n        promptList.push(self.cards);\r\n      }\r\n    }\r\n    return promptList;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取指定张数的最小牌值\r\n * @param  {list} cards - 牌\r\n * @param  {number} n - 张数\r\n * @param  {number} n - 需要大过的值\r\n * @return 值\r\n */\r\nAILogic.prototype.getMinVal = function (n, v) {\r\n  var self = this,\r\n    c = G.gameRule.valCount(self.cards);\r\n  for (var i = c.length - 1; i >= 0; i--) {\r\n    if (c[i].count === n && c[i].val > v) {\r\n      return self.cards.splice(i, 1);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 牌型分析\r\n * @method function\r\n * @return {[shape]} [description]\r\n */\r\nAILogic.prototype.analyse = function () {\r\n  var self = this,\r\n    target = self.cards.slice(0),//拷贝一份牌来分析\r\n    stat = null,//统计信息\r\n    targetWob = null,//除去炸弹之后的牌组\r\n    targetWobt = null,//除去炸弹、三根之后的牌组\r\n    targetWobp = null,//除去炸弹、顺子之后的牌组\r\n    targetWobpp = null;//除去炸弹、连对之后的牌组\r\n  //定义牌型\r\n  self._one = [];\r\n  self._pairs = [];\r\n  self._kingBomb = [];\r\n  self._bomb = [];\r\n  self._three = [];\r\n  self._plane = [];\r\n  self._progression = [];\r\n  self._progressionPairs = [];\r\n  target.sort(G.gameRule.cardSort);\r\n  //判定王炸\r\n  if (G.gameRule.isKingBomb(target.slice(0, 2))) {\r\n    self._kingBomb.push(AICardType(17, target.splice(0, 2)));\r\n  }\r\n  //判定炸弹\r\n  stat = G.gameRule.valCount(target);\r\n  for (var i = 0; i < stat.length; i++) {\r\n    if (stat[i].count === 4) {\r\n      var list = [];\r\n      self.moveItem(target, list, stat[i].val);\r\n      self._bomb.push(AICardType(list[0].val, list));\r\n    }\r\n  }\r\n  targetWob = target.slice(0);\r\n  //判定三根，用于判定三顺\r\n  targetWobt = targetWob.slice(0);\r\n  self.judgeThree(targetWobt);\r\n  //判定三顺(飞机不带牌)\r\n  self.judgePlane();\r\n\r\n  //把三根加回用于判定顺子\r\n  for (let i = 0; i < self._three.length; i++) {\r\n    targetWobt = targetWobt.concat(self._three[i].cardList);\r\n  }\r\n  self._three = [];\r\n  targetWobt.sort(G.gameRule.cardSort);\r\n  //判定顺子，先确定五连\r\n  targetWobp = targetWobt.slice(0);\r\n  self.judgeProgression(targetWobp);\r\n  //判断连对\r\n  //targetWobpp = targetWobp.slice(0);\r\n  self.judgeProgressionPairs(targetWobp);\r\n  //判定三根，用于判定三顺\r\n  //targetWobt = targetWob.slice(0);\r\n  self.judgeThree(targetWobp);\r\n  //除去顺子、炸弹、三根后判断对子、单牌\r\n  stat = G.gameRule.valCount(targetWobp);\r\n  for (let i = 0; i < stat.length; i++) {\r\n    if (stat[i].count === 1) {//单牌\r\n      for (var j = 0; j < targetWobp.length; j++) {\r\n        if (targetWobp[j].val === stat[i].val) {\r\n          self._one.push(AICardType(stat[i].val, targetWobp.splice(j, 1)));\r\n        }\r\n      }\r\n    } else if (stat[i].count === 2) {//对子\r\n      for (var j = 0; j < targetWobp.length; j++) {\r\n        if (targetWobp[j].val === stat[i].val) {\r\n          self._pairs.push(AICardType(stat[i].val, targetWobp.splice(j, 2)));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * 判断给定牌中的三根\r\n * @method judgeThree\r\n */\r\nAILogic.prototype.judgeThree = function (cards) {\r\n  var self = this,\r\n    stat = G.gameRule.valCount(cards);\r\n  for (let i = 0; i < stat.length; i++) {\r\n    if (stat[i].count === 3) {\r\n      var list = [];\r\n      self.moveItem(cards, list, stat[i].val);\r\n      self._three.push(AICardType(list[0].val, list));\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 判断给定牌中的飞机\r\n * @method judgePlane\r\n */\r\nAILogic.prototype.judgePlane = function () {\r\n  var self = this;\r\n  if (self._three.length > 1) {\r\n    var proList = [];\r\n    for (let i = 0; i < self._three.length; i++) {//遍历统计结果\r\n      if (self._three[i].val >= 15) continue;//三顺必须小于2\r\n      if (proList.length == 0) {\r\n        proList.push({ 'obj': self._three[i], 'fromIndex': i });\r\n        continue;\r\n      }\r\n      if (proList[proList.length - 1].val - 1 == self._three[i].val) {//判定递减\r\n        proList.push({ 'obj': self._three[i], 'fromIndex': i });\r\n      } else {\r\n        if (proList.length > 1) {//已经有三顺，先保存\r\n          var planeCards = [];\r\n          for (var j = 0; j < proList.length; j++) {\r\n            planeCards = planeCards.concat(proList[j].obj.cardList);\r\n          }\r\n          self._plane.push(AICardType(proList[0].obj.val, planeCards));\r\n          for (var k = proList.length - 1; k >= 0; k--) {//除去已经被取走的牌\r\n            self._three.splice(proList[k].fromIndex, 1);\r\n          }\r\n        }\r\n        //重新计算\r\n        proList = [];\r\n        proList.push({ 'obj': self._three[i], 'fromIndex': i });\r\n      }\r\n    }\r\n    if (proList.length > 1) {//有三顺，保存\r\n      var planeCards = [];\r\n      for (var j = 0; j < proList.length; j++) {\r\n        planeCards = planeCards.concat(proList[j].obj.cardList);\r\n      }\r\n      self._plane.push(AICardType(proList[0].obj.val, planeCards));\r\n      for (var k = proList.length - 1; k >= 0; k--) {//除去已经被取走的牌\r\n        self._three.splice(proList[k].fromIndex, 1);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 判断给定牌中的顺子(五连)\r\n * @method judgeProgression\r\n * @param  {[array]}         cards 指定的牌\r\n */\r\nAILogic.prototype.judgeProgression = function (cards) {\r\n  var self = this;\r\n\r\n  var saveProgression = function (proList) {\r\n    var progression = [];\r\n    for (var j = 0; j < proList.length; j++) {\r\n      progression.push(proList[j].obj);\r\n    }\r\n    self._progression.push(AICardType(proList[0].obj.val, progression));\r\n    for (var k = proList.length - 1; k >= 0; k--) {//除去已经被取走的牌\r\n      cards.splice(proList[k].fromIndex, 1);\r\n    }\r\n  };\r\n  //判定顺子\r\n  if (cards.length >= 5) {\r\n    var proList = [];\r\n    for (var i = 0; i < cards.length; i++) {\r\n      if (cards[i].val >= 15) continue;//顺子必须小于2\r\n      if (proList.length == 0) {\r\n        proList.push({ 'obj': cards[i], 'fromIndex': i });\r\n        continue;\r\n      }\r\n      if (proList[proList.length - 1].obj.val - 1 === cards[i].val) {//判定递减\r\n        proList.push({ 'obj': cards[i], 'fromIndex': i });\r\n        if (proList.length === 5) break;\r\n      } else if (proList[proList.length - 1].obj.val === cards[i].val) {//相等跳出本轮\r\n        continue;\r\n      } else {\r\n        if (proList.length >= 5) {//已经有顺子，先保存\r\n          //saveProgression(proList);\r\n          //proList = [];\r\n          break;\r\n        } else {\r\n          //重新计算\r\n          proList = [];\r\n          proList.push({ 'obj': cards[i], 'fromIndex': i });\r\n        }\r\n      }\r\n    }\r\n    if (proList.length === 5) {//有顺子，保存\r\n      saveProgression(proList);\r\n      self.judgeProgression(cards);//再次判断顺子\r\n    } else {\r\n      self.joinProgression(cards);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将顺子与剩下的牌进行拼接，组成更大的顺子\r\n * @method judgeProgression\r\n * @param  {[array]}         cards 指定的牌\r\n */\r\nAILogic.prototype.joinProgression = function (cards) {\r\n  var self = this;\r\n  for (var i = 0; i < self._progression.length; i++) {//拼接其他散牌\r\n    for (var j = 0; j < cards.length; j++) {\r\n      if (self._progression[i].val != 14 && self._progression[i].val === cards[j].val - 1) {\r\n        self._progression[i].cardList.unshift(cards.splice(j, 1)[0]);\r\n      } else if (cards[j].val === self._progression[i].val - self._progression[i].cardList.length) {\r\n        self._progression[i].cardList.push(cards.splice(j, 1)[0]);\r\n      }\r\n    }\r\n  }\r\n  var temp = self._progression.slice(0);\r\n  for (let i = 0; i < temp.length; i++) {//连接顺子\r\n    if (i < temp.length - 1 && temp[i].val - temp[i].cardList.length === temp[i + 1].val) {\r\n      self._progression[i].cardList = self._progression[i].cardList.concat(self._progression[i + 1].cardList);\r\n      self._progression.splice(++i, 1);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 判断给定牌中的连对\r\n * @method judgeProgressionPairs\r\n * @param  {[array]}         cards 指定的牌\r\n */\r\nAILogic.prototype.judgeProgressionPairs = function (cards) {\r\n  var self = this;\r\n\r\n  var saveProgressionPairs = function (proList) {\r\n    var progressionPairs = [];\r\n    for (var i = proList.length - 1; i >= 0; i--) {//除去已经被取走的牌\r\n      for (var j = 0; j < cards.length; j++) {\r\n        if (cards[j].val === proList[i]) {\r\n          progressionPairs = progressionPairs.concat(cards.splice(j, 2));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    progressionPairs.sort(G.gameRule.cardSort);\r\n    self._progressionPairs.push(AICardType(proList[0], progressionPairs));\r\n  };\r\n  //判定连对\r\n  if (cards.length >= 6) {\r\n    var proList = [];\r\n    var stat = G.gameRule.valCount(cards);//统计\r\n    for (var i = 0; i < stat.length; i++) {\r\n      if (stat[i].val >= 15) {//连对必须小于2\r\n        continue;\r\n      }\r\n      if (proList.length == 0 && stat[i].count >= 2) {\r\n        proList.push(stat[i].val);\r\n        continue;\r\n      }\r\n      if (proList[proList.length - 1] - 1 === stat[i].val && stat[i].count >= 2) {//判定递减\r\n        proList.push(stat[i].val);\r\n      } else {\r\n        if (proList.length >= 3) {//已经有连对，先保存\r\n          //saveProgressionPairs(proList);\r\n          //proList = [];\r\n          break;\r\n        } else {\r\n          //重新计算\r\n          proList = [];\r\n          if (stat[i].count >= 2) proList.push(stat[i].val);\r\n        }\r\n      }\r\n    }\r\n    if (proList.length >= 3) {//有顺子，保存\r\n      saveProgressionPairs(proList);\r\n      self.judgeProgressionPairs(cards);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将src中对应值的牌数据移到dest中\r\n */\r\nAILogic.prototype.moveItem = function (src, dest, v) {\r\n  for (var i = src.length - 1; i >= 0; i--) {\r\n    if (src[i].val === v) {\r\n      dest.push(src.splice(i, 1)[0]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 设置返回牌的类型\r\n * @method setCardKind\r\n * @param  {[object]}    obj  对象\r\n * @param  {[kind]}    kind 牌型\r\n */\r\nAILogic.prototype.setCardKind = function (obj, kind) {\r\n  obj.cardKind = kind;\r\n  obj.size = obj.cardList.length;\r\n  return obj;\r\n};\r\n\r\n/**\r\n * 获取大过当前最大牌的三顺最小值\r\n * 指定牌张数\r\n * @return\r\n */\r\nAILogic.prototype.minPlane = function (len, winc) {\r\n  var self = this;\r\n  if (self._plane.length > 0) {\r\n    for (var i = self._plane.length - 1; i >= 0; i--) {//从小值开始判断\r\n      if (winc.val < self._plane[i].val && len <= self._plane[i].cardList.length) {\r\n        if (len === self._plane[i].cardList.length) {\r\n          return self.setCardKind(self._plane[i], G.gameRule.PLANE);\r\n        } else {\r\n          var valDiff = self._plane[i].val - winc.val,\r\n            sizeDiff = (self._plane[i].cardList.length - len) / 3;\r\n          for (var j = 0; j < sizeDiff; j++) {//拆顺\r\n            if (valDiff > 1) {\r\n              for (var k = 0; k < 3; k++) {\r\n                self._plane[i].cardList.shift();\r\n              }\r\n              valDiff--;\r\n              continue;\r\n            }\r\n            for (var k = 0; k < 3; k++) {\r\n              self._plane[i].cardList.pop();\r\n            }\r\n          }\r\n          return self.setCardKind(self._plane[i], G.gameRule.PLANE);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 获取list中大过v的最小的元素\r\n * @param  {array} list [description]\r\n * @param  {number} kind    牌型\r\n * @param  {number} v    要大过的值\r\n * @return\r\n */\r\nAILogic.prototype.minCards = function (list, kind, v) {\r\n  var self = this;\r\n  v = v ? v : 2;\r\n  if (list.length > 0) {\r\n    for (var i = list.length - 1; i >= 0; i--) {//从小值开始判断\r\n      if (v < list[i].val) {\r\n        return self.setCardKind(list[i], kind);\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 获取list对应牌型最大\r\n * @param  {array} list [description]\r\n * @param  {number} kind    牌型\r\n * @param  {number} v    要大过的值\r\n * @return\r\n */\r\nAILogic.prototype.maxCards = function (list, kind, v) {\r\n  var self = this,\r\n    max = null;\r\n  if (list.length > 0) {\r\n    for (var i = 0; i < list.length; i++) {//从小值开始判断\r\n      if ((max && list[i].val > max.val) || !max) {\r\n        max = list[i];\r\n      }\r\n    }\r\n    return v ? (max.val > v ? self.setCardKind(max, kind) : null) : self.setCardKind(max, kind);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 根据自己是否是庄家，来决定出牌，匹配最大或者最小\r\n * @method function\r\n * @param  {[array]} list 出牌列表\r\n * @return {[number]}      牌型\r\n * @param  {object} winc 当前牌面最大牌\r\n * @param  {boolean} isWinnerIsLandlord 当前最大是否是地主\r\n * @return {number} winnerCardCount 当前最大那家剩余手牌数\r\n */\r\nAILogic.prototype.matchCards = function (list, kind, winc, isWinnerIsLandlord, winnerCardCount) {\r\n  var self = this;\r\n  if (self.player.isLandlord) {//坐庄打法\r\n    if (self.player.nextPlayer.cardList.length < 3 || self.player.nextPlayer.nextPlayer.cardList.length < 3)\r\n      return self.maxCards(list, kind, winc.val);\r\n    else\r\n      return self.minCards(list, kind, winc.val);\r\n  } else {//偏家打法\r\n    if (isWinnerIsLandlord) {//地主大时\r\n      if (winnerCardCount < 3) {\r\n        return self.maxCards(list, kind, winc.val);\r\n      } else {\r\n        return self.minCards(list, kind, winc.val);\r\n      }\r\n    } else {\r\n      var c = null;\r\n      if (self.player.nextPlayer.isLandlord && self.player.nextPlayer.cardList.length < 3) {\r\n        return self.maxCards(list, kind, winc.val);\r\n      } else {\r\n        c = self.minCards(list, kind, winc.val);\r\n        return c ? (c.val < 14 || self.times() <= 2 ? c : null) : null;\r\n      }\r\n    }\r\n  }\r\n};\r\n/**\r\n * 从对子或者单牌中获取一张牌\r\n * @param  {array} list [description]\r\n * @param  {number} v    需要大过的值\r\n * * @param  {number} notEq    对子中不允许出现的值\r\n * @return\r\n */\r\nAILogic.prototype.minOne = function (v, notEq) {\r\n  var self = this,\r\n    one = self.minCards(self._one, G.gameRule.ONE, v),\r\n    oneFromPairs = self.offPairs(notEq);\r\n  if (!one) {//没有单根，找对\r\n    if (oneFromPairs) {\r\n      self.deleteOne(oneFromPairs);\r\n      return oneFromPairs;\r\n    } else {\r\n      return null;\r\n    }\r\n  } else {\r\n    if (one.val > 14) {//保留2和大小王\r\n      if (oneFromPairs) {\r\n        self.deleteOne(oneFromPairs);\r\n        return oneFromPairs;\r\n      } else\r\n        return null;\r\n    } else {\r\n      return one.cardList[0];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 拆对\r\n * @param  {number} v 要大过的值\r\n * @param  {number} notEq 不能等于的值\r\n * @return {card}    拆出来得到的牌\r\n */\r\nAILogic.prototype.offPairs = function (v, notEq) {\r\n  var self = this,\r\n    pairs = self.minCards(self._pairs, G.gameRule.PAIRS, v);\r\n  if (pairs) {\r\n    while (true) {\r\n      if (pairs.cardList[0].val === notEq) {\r\n        pairs = self.minCards(self._pairs, G.gameRule.PAIRS, pairs.cardList[0].val);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return pairs ? pairs.cardList[0] : null;\r\n};\r\n/*\r\n    删掉一张牌并重新分析\r\n */\r\nAILogic.prototype.deleteOne = function (card) {\r\n  for (var i = 0; i < this.cards.length; i++) {\r\n    if (this.cards[i].val === card.val && this.cards[i].shape === card.shape) {\r\n      this.cards.splice(i, 1);\r\n    }\r\n  }\r\n  this.analyse();\r\n};\r\n/**\r\n * 手牌评分,用于AI根据自己手牌来叫分\r\n * @method function\r\n * @return {[nmber]} 所评得分\r\n */\r\nAILogic.prototype.judgeScore = function () {\r\n  var self = this,\r\n    score = 0;\r\n  score += self._bomb.length * 6;//有炸弹加六分\r\n  if (self._kingBomb.length > 0) {//王炸8分\r\n    score += 8;\r\n  } else {\r\n    if (self.cards[0].val === 17) {\r\n      score += 4;\r\n    } else if (self.cards[0].val === 16) {\r\n      score += 3;\r\n    }\r\n  }\r\n  for (var i = 0; i < self.cards.length; i++) {\r\n    if (self.cards[i].val === 15) {\r\n      score += 2;\r\n    }\r\n  }\r\n  console.info(self.player.userId + \"手牌评分：\" + score);\r\n  if (score >= 7) {\r\n    return 3;\r\n  } else if (score >= 5) {\r\n    return 2;\r\n  } else if (score >= 3) {\r\n    return 1;\r\n  } else {//4相当于不叫\r\n    return 4;\r\n  }\r\n};\r\n\r\n//出牌排序\r\n//排序，单牌、对，三根，炸弹从小到大\r\nAILogic.prototype.promptSort = function (a, b) {\r\n  if (a.count === b.count) {\r\n    return a.val > b.val ? 1 : -1;\r\n  } if (a.count < b.count) {\r\n    return -1;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\n/**\r\n * 手数，手牌需要打出几次才能打完\r\n * @method times\r\n */\r\nAILogic.prototype.times = function () {\r\n  var t = this._kingBomb.length +\r\n    this._bomb.length +\r\n    this._progression.length +\r\n    this._progressionPairs.length +\r\n    this._one.length +\r\n    this._pairs.length;\r\n  var threeCount = this._three.length;\r\n  if (this._plane.length > 0) {\r\n    for (var i = 0; i < this._plane.length; i++) {\r\n      threeCount += this._plane[i].cardList.length / 3;\r\n    }\r\n  }\r\n  if (threeCount - (this._one.length + this._pairs.length) > 0) {\r\n    t += threeCount - (this._one.length + this._pairs.length);\r\n  }\r\n  return t;\r\n};\r\n\r\nAILogic.prototype.log = function () {\r\n  var self = this;\r\n  console.info('以下显示【' + self.player.userId + '】手牌概况，手数：' + self.times());\r\n  console.info('王炸');\r\n  console.info(self._kingBomb);\r\n  console.info('炸弹');\r\n  console.info(self._bomb);\r\n  console.info('三根');\r\n  console.info(self._three);\r\n  console.info('飞机');\r\n  console.info(self._plane);\r\n  console.info('顺子');\r\n  console.info(self._progression);\r\n  console.info('连对');\r\n  console.info(self._progressionPairs);\r\n  console.info('单牌');\r\n  console.info(self._one);\r\n  console.info('对子');\r\n  console.info(self._pairs);\r\n};\r\n\r\nmodule.exports = AILogic\r\n","/**\r\n * Date: 2018/8/15\r\n * Author: \r\n * Desc: 数据监听器\r\n * \r\n * module use example:\r\n *      创建数据监听:\r\n *          this.testNotify = DataNotify.create(this, 'test' , 1) \r\n *      添加监听:\r\n *          this.testNotify.addListener(this.callback, this)\r\n *      移除监听:\r\n *          this.testNotify.removeListener(this.callback , this)\r\n *      修改监听数据:\r\n *          this.test= this.test+1 (数据修改会立即通知所有的监听者)\r\n */\r\n\r\nvar DataNotify = cc.Class({\r\n\r\n  ctor() {\r\n    var data = arguments[0];\r\n    this._listeners = [];\r\n    this.setData(data);\r\n  },\r\n\r\n  /**\r\n   * 添加数据监听者\r\n   *\r\n   * @method addListener\r\n   * @param {Function} callback\r\n   * @param {Object} target\r\n   */\r\n  addListener(callback, target) {\r\n    cc.assert(callback)\r\n    var listener = {\r\n      callback: callback,\r\n      target: target,\r\n    }\r\n    for (const listener of this._listeners) {\r\n      if (target === listener.target) {\r\n        return\r\n      }\r\n    }\r\n    this._listeners.push(listener);\r\n  },\r\n\r\n  /**\r\n  * 移除数据监听者\r\n  *\r\n  * @method addListener\r\n  * @param {Function} callback\r\n  * @param {Object} target\r\n  */\r\n  removeListener(callback, target) {\r\n    for (const listener of this._listeners) {\r\n      if (target === listener.target) {\r\n        cc.js.array.remove(this._listeners, listener);\r\n        break\r\n      }\r\n    }\r\n  },\r\n\r\n  getData() {\r\n    return this._data;\r\n  },\r\n\r\n  setData(data) {\r\n    this._oldData = this._data;\r\n    this._data = data;\r\n    this._tryBindArrayFunction()\r\n    this.update();\r\n  },\r\n\r\n  _tryBindArrayFunction() {\r\n    if (this._data instanceof Array) {\r\n      let self = this\r\n      var arrProto = Object.create(Array.prototype);\r\n      ['shift', 'unshift', 'push', 'pop', 'splice'].forEach(function (method) {\r\n        Object.defineProperty(arrProto, method, {\r\n          value: function () {\r\n            var result = Array.prototype[method].apply(this, arguments);\r\n            self.update()\r\n            return result;\r\n          }\r\n        })\r\n      })\r\n      this._data.__proto__ = arrProto\r\n    }\r\n  },\r\n\r\n  update() {\r\n    this._listeners.forEach(element => {\r\n      element.callback.call(element.target, this._data, this._oldData);\r\n    });\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * 创建数据监听器(静态方法)\r\n     *\r\n     * @method create\r\n     * @param {Object} module\r\n     * @param {String} dataName\r\n     * @param {any} defaultData\r\n     */\r\n    create(module, dataName, defaultData) {\r\n      let dataNotify = new DataNotify(defaultData);\r\n      Object.defineProperty(module, dataName, {\r\n        get: function () { return dataNotify.getData() },\r\n        set: function (data) { return dataNotify.setData(data) }\r\n      })\r\n      return dataNotify;\r\n    },\r\n\r\n    factory: function (host, name, def) {\r\n      host[name] = undefined;\r\n      host[name + 'Notify'] = this.create(host, name, def);\r\n    },\r\n  },\r\n});\r\n\r\nmodule.exports = DataNotify;","const api = {\r\n\r\n}\r\nmodule.exports = api\r\n","/**\r\n * @description 音效控制\r\n */\r\n// var Constants = require('Constants');\r\nmodule.exports = {\r\n  /**\r\n   * @description 播放背景音乐\r\n   * @param clip 音乐名称\r\n   * @param finished 回调\r\n   */\r\n  _MusicId: null,\r\n  _LastMusicClip: null,\r\n  _PauseMusic: false,\r\n  isPlayedAudio: false,//是否已经播放过音效\r\n  _effectVolume: 1.0,\r\n  PlayMusic: function (clip, finished) {\r\n    this.MusicClip = clip || this.MusicClip;\r\n    cc.log('=========this.MusicClip=========' + this.MusicClip);\r\n    // if (!Constants.AudioConfig.MusicToggle) return;\r\n    // if(this._LastMusicClip==clip)return;\r\n    this._LastMusicClip = clip;\r\n    cc.audioEngine.stopAll();\r\n    var musicId = cc.audioEngine.playMusic(this.MusicClip, true);\r\n    this._MusicId = musicId;\r\n    if (finished) {\r\n      cc.audioEngine.setFinishCallback(musicId, finished);\r\n    }\r\n  },\r\n  /**\r\n   * @description 停止播放音乐\r\n   */\r\n  StopMusic: function () {\r\n    cc.audioEngine.stopMusic();\r\n    this._LastMusicClip = null;\r\n  },\r\n  /**\r\n   * @description 暂停播放音乐\r\n   */\r\n  HidePagePause: function () {\r\n    console.log('HidePagePause', this._MusicId);\r\n    try {\r\n      if (this._MusicId) {\r\n        this._PauseMusic = true;\r\n        cc.audioEngine.setVolume(this._MusicId, 0.0);\r\n        cc.audioEngine.pause(this._MusicId);\r\n      }\r\n    } catch (error) {\r\n      console.log('HidePagePause---error==', error);\r\n    }\r\n\r\n  },\r\n  ShowPageResume: function () {\r\n    console.log('ShowPageResume', this._MusicId);\r\n    try {\r\n      if (this._MusicId) {\r\n        this._PauseMusic = false;\r\n        cc.audioEngine.setVolume(this._MusicId, 1.0);\r\n        cc.audioEngine.resume(this._MusicId);\r\n      }\r\n    } catch (error) {\r\n      console.log('ShowPageResume---error==', error);\r\n    }\r\n\r\n  },\r\n  PauseMusic: function () {\r\n    console.log(\"暂停播放音乐\");\r\n    cc.audioEngine.setVolume(this._MusicId, 0.0);\r\n    cc.audioEngine.pause(this._MusicId);\r\n  },\r\n  stopAll: function () {\r\n    cc.audioEngine.stopAll();\r\n  },\r\n  /**\r\n   * @description 恢复播放音乐\r\n   */\r\n  ResumeMusic: function () {\r\n    console.log(\"恢复播放音乐\");\r\n    cc.audioEngine.setVolume(this._MusicId, 1.0);\r\n    cc.audioEngine.resume(this._MusicId);\r\n  },\r\n\r\n  setMusicVolume(value) {\r\n    cc.audioEngine.setVolume(this._MusicId, value);\r\n  },\r\n\r\n  setEffectVolume(value) {\r\n    this._effectVolume = value\r\n  },\r\n\r\n  /**\r\n   * @description 播放音效\r\n   * @param clip 音效名称\r\n   * @param finished 回调\r\n   */\r\n  PlayEffect: function (clip, finished) {\r\n    // if (!Constants.AudioConfig.EffectToggle) return;\r\n    if (this._PauseMusic) return;\r\n    if (clip) {\r\n      var audioId = cc.audioEngine.playEffect(clip, false);\r\n      cc.audioEngine.setVolume(audioId, this._effectVolume);\r\n      this.isPlayedAudio = true;\r\n      if (finished) {\r\n        cc.audioEngine.setFinishCallback(audioId, finished);\r\n      }\r\n      return audioId;\r\n    }\r\n    return null;\r\n  },\r\n  /**\r\n   * @description 播放赢个不停，手气不错的声音\r\n   * @param clip 音效名称\r\n   * @param finished 回调\r\n   */\r\n  PlayEffectGirlSound: function (clip, finished) {\r\n    // if (!Constants.AudioConfig.EffectToggle) return;\r\n    if (this._PauseMusic) return;\r\n    if (clip) {\r\n      var audioId = cc.audioEngine.playEffect(clip, false);\r\n      this.isPlayedAudio = true;\r\n      if (finished) {\r\n        cc.audioEngine.setFinishCallback(audioId, finished);\r\n      }\r\n      return audioId;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  StopEffect: function (id) {\r\n    cc.audioEngine.stop(id);\r\n  },\r\n  /**\r\n   * @description 停止/恢复播放背景音乐\r\n   */\r\n  ToggleMusic(toggle) {\r\n    // Constants.AudioConfig.MusicToggle = toggle.isChecked;\r\n    if (toggle.isChecked) {\r\n      if (!cc.audioEngine.isMusicPlaying()) {\r\n        this.PlayMusic();\r\n      }\r\n    } else {\r\n      this.StopMusic();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @description 停止/恢复播放音效\r\n   */\r\n  ToggleEffects(toggle) {\r\n    // Constants.AudioConfig.EffectToggle = toggle.isChecked;\r\n  }\r\n}\r\n\r\n","//发牌管理器\r\nconst cardobj = function (value, shape, king) {\r\n  var that = {}\r\n  that.index = -1\r\n  if (value) {\r\n    that.value = value\r\n    that.val = value + 2 // gameRule使用\r\n  }\r\n\r\n  if (shape) {\r\n    that.shape = shape\r\n  }\r\n\r\n  if (king != undefined) {\r\n    that.king = king\r\n    that.val = king + 2 // gameRule使用\r\n    that.shape = 0\r\n  }\r\n  return that\r\n}\r\nconst cardvalue = {\r\n  \"A\": 12,\r\n  \"2\": 13,\r\n  \"3\": 1,\r\n  \"4\": 2,\r\n  \"5\": 3,\r\n  \"6\": 4,\r\n  \"7\": 5,\r\n  \"8\": 6,\r\n  \"9\": 7,\r\n  \"10\": 8,\r\n  \"J\": 9,\r\n  \"Q\": 10,\r\n  \"K\": 11,\r\n}\r\n\r\n// 黑桃：spade\r\n// 红桃：heart\r\n// 梅花：club\r\n// 方片：diamond\r\nconst CardShape = {\r\n  \"S\": 1,\r\n  \"H\": 2,\r\n  \"C\": 3,\r\n  \"D\": 4,\r\n};\r\n\r\n//大小王分开写是因为只有一张，并且没有黑桃这些区分\r\nconst Kings = {\r\n  \"kx\": 14, //小王\r\n  \"Kd\": 15,  //大王\r\n};\r\n\r\nfunction carder() {\r\n  var that = {\r\n    card_list: []\r\n  }\r\n  const shuffleCard = function () {\r\n    for (var i = that.card_list.length - 1; i >= 0; i--) {\r\n      var randomIndex = Math.floor(Math.random() * (i + 1));\r\n      //随机交换\r\n      var tmpCard = that.card_list[randomIndex];\r\n      that.card_list[randomIndex] = that.card_list[i];\r\n      that.card_list[i] = tmpCard;\r\n    }\r\n\r\n    // for(var i=0;i<that.card_list.length;i++){\r\n    //     console.log(\"card value:\"+that.card_list[i].value+\" shape:\"+that.card_list[i].shape+\" king\"+that.card_list[i].king)\r\n    // }\r\n    return that.card_list\r\n  }\r\n  //发牌\r\n  const creatleCard = function () {\r\n    that.card_list = []\r\n    //实例化52张牌\r\n    for (const iv in cardvalue) {\r\n      for (const js in CardShape) {\r\n        //实例化牌对象\r\n        const card = cardobj(cardvalue[iv], CardShape[js], undefined)\r\n        card.index = that.card_list.length;\r\n        that.card_list.push(card)\r\n      }\r\n    }\r\n\r\n    for (var i in Kings) {\r\n      var card = cardobj(undefined, undefined, Kings[i]);\r\n      card.index = that.card_list.length;\r\n      that.card_list.push(card)\r\n    }\r\n    //洗牌\r\n    shuffleCard()\r\n  }\r\n  //把牌分成三份和三张带翻的牌\r\n  //每份牌17张\r\n  that.splitThreeCards = function () {\r\n    //创建牌\r\n    creatleCard()\r\n    var threeCards = {}\r\n    for (var i = 0; i < 17; i++) {\r\n      for (var j = 0; j < 3; j++) {\r\n        if (threeCards.hasOwnProperty(j)) {\r\n          threeCards[j].push(that.card_list.pop());\r\n        } else {\r\n          threeCards[j] = [that.card_list.pop()];\r\n        }\r\n      }\r\n    }\r\n\r\n    return [threeCards[0], threeCards[1], threeCards[2], that.card_list]\r\n  }\r\n\r\n  //出一张牌\r\n  const isOneCard = function (cardList) {\r\n    if (cardList.length === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //是否对子\r\n  const IsDoubleCard = function (cardList) {\r\n\r\n    if (cardList.length != 2) {\r\n      return false\r\n    }\r\n    //cardList[0].value==undefined说明是大小王，值是存储在king字段\r\n    if (cardList[0].card_data.value == undefined\r\n      || cardList[0].card_data.value != cardList[1].card_data.value) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  //三张不带\r\n  const Isthree = function (cardList) {\r\n\r\n    if (cardList.length != 3) {\r\n      return false\r\n    }\r\n    //不能是大小王\r\n    if (cardList[0].card_data.value == undefined || cardList[1].card_data.value == undefined) {\r\n      return false\r\n    }\r\n    //判断三张牌是否相等\r\n    if (cardList[0].card_data.value != cardList[1].card_data.value) {\r\n      return false\r\n    }\r\n\r\n    if (cardList[0].card_data.value != cardList[2].card_data.value) {\r\n      return false\r\n    }\r\n\r\n    if (cardList[1].card_data.value != cardList[2].card_data.value) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  //三带一\r\n  const IsThreeAndOne = function (cardList) {\r\n    if (cardList.length != 4) {\r\n      return false\r\n    }\r\n    //被带的一张放在2头\r\n    if (cardList[1].card_data.value == undefined || cardList[2].card_data.value == undefined) {\r\n      return false\r\n    }\r\n    if (cardList[0].card_data.value == cardList[1].card_data.value &&\r\n      cardList[1].card_data.value == cardList[2].card_data.value) {\r\n      return true;\r\n\r\n    } else if (cardList[1].card_data.value == cardList[2].card_data.value &&\r\n      cardList[2].card_data.value == cardList[3].card_data.value) {\r\n      return true;\r\n    }\r\n    return false\r\n  }\r\n\r\n  //三带二\r\n  const IsThreeAndTwo = function (cardList) {\r\n    if (cardList.length != 5) {\r\n      return false\r\n    }\r\n\r\n    if (cardList[0].card_data.value == cardList[1].card_data.value\r\n      && cardList[1].card_data.value == cardList[2].card_data.value) {\r\n      if (cardList[3].card_data.value == cardList[4].card_data.value) {\r\n        return true;\r\n      }\r\n\r\n    } else if (cardList[2].card_data.value == cardList[3].card_data.value &&\r\n      cardList[3].card_data.value == cardList[4].card_data.value) {\r\n      if (cardList[0].card_data.value == cardList[1].card_data.value) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  //四张炸弹\r\n  const IsBoom = function (cardList) {\r\n    if (cardList.length != 4) {\r\n      return false\r\n    }\r\n\r\n    var map = {}\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (map.hasOwnProperty(cardList[i].card_data.value)) {\r\n        map[cardList[i].card_data.value]++\r\n      } else {\r\n        map[cardList[i].card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    var keys = Object.keys(map)\r\n    if (keys.length == 1) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  //王炸\r\n  const IsKingBoom = function (cardList) {\r\n    if (cardList.length != 2) {\r\n      return false\r\n    }\r\n\r\n    if (cardList[0].card_data.king != undefined && cardList[1].card_data.king != undefined) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  //飞机不带\r\n  const IsPlan = function (cardList) {\r\n    if (cardList.length != 6) {\r\n      return false\r\n    }\r\n\r\n    var map = {}\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (map.hasOwnProperty(cardList[i].card_data.value)) {\r\n        map[cardList[i].card_data.value]++\r\n      } else {\r\n        map[cardList[i].card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    var keys = Object.keys(map)\r\n    console.log(\"IsPlan keys\" + keys)\r\n    if (keys.length == 2) {\r\n      //判断相同牌是否为三张\r\n      for (let key in map) {\r\n        if (map[key] != 3) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      //判断是否为相邻的牌\r\n      var p1 = Number(keys[0])\r\n      var p2 = Number(keys[1])\r\n      if (Math.abs(p1 - p2) != 1) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  //飞机带2个单张\r\n  const IsPlanWithSing = function (cardList) {\r\n    if (cardList.length != 8) {\r\n      return false\r\n    }\r\n\r\n    var map = {}\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (map.hasOwnProperty(cardList[i].card_data.value)) {\r\n        map[cardList[i].card_data.value]++\r\n      } else {\r\n        map[cardList[i].card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    var keys = Object.keys(map)\r\n    console.log(\"IsPlan keys\" + keys)\r\n    if (keys.length != 4) {\r\n      return false\r\n    }\r\n    //判断是否有2个三张牌\r\n    var three_list = []\r\n    var sing_count = 0\r\n    for (var i in map) {\r\n      if (map[i] == 3) {\r\n        three_list.push(i)\r\n      } else if (map[i] == 1) {\r\n        sing_count++\r\n      }\r\n    }\r\n\r\n    if (three_list.length != 2 || sing_count != 2) {\r\n      return false\r\n    }\r\n\r\n    //判断是否为相邻的牌\r\n    var p1 = Number(three_list[0])\r\n    var p2 = Number(three_list[1])\r\n    if (Math.abs(p1 - p2) != 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n  //飞机带2对 \r\n  const IsPlanWithDouble = function (cardList) {\r\n    if (cardList.length != 10) {\r\n      return false\r\n    }\r\n\r\n    var map = {}\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (map.hasOwnProperty(cardList[i].card_data.value)) {\r\n        map[cardList[i].card_data.value]++\r\n      } else {\r\n        map[cardList[i].card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    var keys = Object.keys(map)\r\n    if (keys.length != 4) {\r\n      return false\r\n    }\r\n    /*\r\n    \"3\":3,\r\n    \"4\":4,\r\n    \"j\":2,\r\n    \"9\":2,\r\n    */\r\n    var three_list = []\r\n    var double_count = 0\r\n    for (var i in map) {\r\n      if (map[i] == 3) {\r\n        three_list.push(i)\r\n      } else if (map[i] == 2) {\r\n        double_count++\r\n      }\r\n    }\r\n\r\n    if (three_list.length != 2 || double_count != 2) {\r\n      return false\r\n    }\r\n\r\n    //判断是否为相邻的牌\r\n    var p1 = Number(three_list[0])\r\n    var p2 = Number(three_list[1])\r\n    if (Math.abs(p1 - p2) != 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  //顺子\r\n  const IsShunzi = function (cardList) {\r\n\r\n    if (cardList.length < 5 || cardList.length > 12) {\r\n      return false\r\n    }\r\n    var tmp_cards = cardList\r\n    //不能有2或者大小王\r\n    for (var i = 0; i < tmp_cards.length; i++) {\r\n      if (tmp_cards[i].card_data.value == 13 || tmp_cards[i].card_data.value == 14\r\n        || tmp_cards[i].card_data.value == 15) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    //排序 从小到大\r\n    //sort返回正值做交换\r\n    tmp_cards.sort(function (x, y) {\r\n      return Number(x.card_data.value) - Number(y.card_data.value)\r\n    })\r\n    //console.log(\"IsShunzi tmp_cards\"+JSON.stringify(tmp_cards))\r\n    for (var i = 0; i < tmp_cards.length; i++) {\r\n      if (i + 1 == tmp_cards.length) {\r\n        break\r\n      }\r\n      var p1 = Number(tmp_cards[i].card_data.value)\r\n      var p2 = Number(tmp_cards[i + 1].card_data.value)\r\n      if (Math.abs(p1 - p2) != 1) {\r\n        return false\r\n      }\r\n\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  //连队\r\n  const IsLianDui = function (cardList) {\r\n    if (cardList.length < 6 || cardList.length > 24) {\r\n      return false\r\n    }\r\n\r\n    //不能包括大小王,和2\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (cardList[i].card_data.value == 14\r\n        || cardList[i].card_data.value == 15 || cardList[i].card_data.value == 13) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    var map = {}\r\n    for (var i = 0; i < cardList.length; i++) {\r\n      if (map.hasOwnProperty(cardList[i].card_data.value)) {\r\n        map[cardList[i].card_data.value]++\r\n      } else {\r\n        map[cardList[i].card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    //相同牌只能是2张\r\n    for (var key in map) {\r\n      if (map[key] != 2) {\r\n        return false\r\n      }\r\n    }\r\n    var keys = Object.keys(map)\r\n    if (keys.length < 3) {\r\n      return false\r\n    }\r\n    //从小到大排序\r\n    keys.sort(function (x, y) {\r\n      return Number(x) - Number(y)\r\n    })\r\n\r\n    //对子之间相减绝对值只能是1\r\n    for (var i = 0; i < keys.length; i++) {\r\n      if (i + 1 == keys.length) {\r\n        break\r\n      }\r\n      var p1 = Number(keys[i])\r\n      var p2 = Number(keys[i + 1])\r\n      if (Math.abs(p1 - p2) != 1) {\r\n        return false\r\n      }\r\n\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  //牌型之间大小数值的定义\r\n  const CardsValue = {\r\n    'one': {\r\n      name: 'One',\r\n      value: 1\r\n    },\r\n    'double': {\r\n      name: 'Double',\r\n      value: 1\r\n    },\r\n    'three': {\r\n      name: 'Three',\r\n      value: 1\r\n    },\r\n    'boom': { //炸弹\r\n      name: 'Boom',\r\n      value: 2\r\n    },\r\n    'threeWithOne': {\r\n      name: 'ThreeWithOne',\r\n      value: 1\r\n    },\r\n    'threeWithTwo': {\r\n      name: 'ThreeWithTwo',\r\n      value: 1\r\n    },\r\n    'plane': {\r\n      name: 'Plane',\r\n      value: 1\r\n    },\r\n    'planeWithOne': {\r\n      name: 'PlaneWithOne',\r\n      value: 1\r\n    },\r\n    'planeWithTwo': {\r\n      name: 'PlaneWithTwo',\r\n      value: 1\r\n    },\r\n    'scroll': { //顺子\r\n      name: 'Scroll',\r\n      value: 1\r\n    },\r\n    'doubleScroll': {  //连队\r\n      name: 'DoubleScroll',\r\n      value: 1\r\n    },\r\n    'kingboom': { //王炸\r\n      name: 'kingboom',\r\n      value: 3\r\n    },\r\n\r\n\r\n  };\r\n\r\n  //cardA是上次出的牌\r\n  //cardB是当前出的牌\r\n  //cardB大于cardA返回true\r\n  const compareOne = function (cardA, cardB) {\r\n    console.log(\"compareOne\")\r\n    var valueA = 0\r\n    if (cardA[0].card_data.value == undefined) {\r\n      valueA = cardA[0].card_data.king\r\n    } else {\r\n      valueA = cardA[0].card_data.value\r\n    }\r\n\r\n    var valueB = 0\r\n    if (cardB[0].card_data.value == undefined) {\r\n      valueB = cardB[0].card_data.king\r\n    } else {\r\n      valueB = cardB[0].card_data.value\r\n    }\r\n\r\n    if (valueA >= valueB) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const compareDouble = function (cardA, cardB) {\r\n    console.log(\"compareDouble\")\r\n    var result = compareOne(cardA, cardB)\r\n    return result\r\n  }\r\n\r\n  const compareThree = function (cardA, cardB) {\r\n    console.log(\"compareThree\")\r\n    var result = compareOne(cardA, cardB)\r\n    return result\r\n  }\r\n\r\n  const compareBoom = function (cardA, cardB) {\r\n    console.log(\"compareBoom\")\r\n    var result = false\r\n    if (cardA.length == 4 && cardB.length == 4) {\r\n      result = compareOne(cardA, cardB)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  const compareBoomKing = function (cardA, cardB) {\r\n    if (cardB.length != 2) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  //三带一大小比较\r\n  const comparePlanWithSing = function (cardA, cardB) {\r\n    //将三带存储到2个列表\r\n    var lista = []\r\n    var listb = []\r\n    var map = {}\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (map.hasOwnProperty(cardA.card_data.value)) {\r\n        lista.push(cardA)\r\n      } else {\r\n        map[cardA.card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (map.hasOwnProperty(cardB.card_data.value)) {\r\n        listb.push(cardB)\r\n      } else {\r\n        map[cardB.card_data.value] = 1\r\n      }\r\n    }\r\n\r\n    var result = compareOne(cardA, cardB)\r\n    return result\r\n  }\r\n\r\n  const comparePlanWithTow = function (cardA, cardB) {\r\n    let mapA = {};\r\n    let mapB = {};\r\n\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (mapA.hasOwnProperty(cardA[i].card_data.value)) {\r\n        mapA[cardA[i].card_data.value].push(cardA[i]);\r\n      } else {\r\n        mapA[cardA[i].card_data.value] = [cardA[i]];\r\n      }\r\n    }\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (mapB.hasOwnProperty(cardB[i].card_data.value)) {\r\n        mapB[cardB[i].card_data.value].push(cardB[i]);\r\n      } else {\r\n        mapB[cardB[i].card_data.value] = [cardB[i]];\r\n      }\r\n    }\r\n\r\n    var listA = [];\r\n    for (var i in mapA) {\r\n      if (mapA[i].length === 3) {\r\n        listA = mapA[i];\r\n      }\r\n    }\r\n\r\n    var listB = [];\r\n    for (var i in mapB) {\r\n      if (mapB[i].length === 3) {\r\n        listB = mapB[i];\r\n      }\r\n    }\r\n\r\n    var result = compareOne(listA, listB)\r\n    return result\r\n\r\n  }\r\n\r\n  const comparePlan = function (cardA, cardB) {\r\n    var mapA = {};\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (mapA.hasOwnProperty(cardA[i].card_data.value)) {\r\n        mapA[cardA[i].card_data.value].push(cardA[i]);\r\n      } else {\r\n        mapA[cardA[i].card_data.value] = [cardA[i]];\r\n      }\r\n    }\r\n\r\n    var listA = []\r\n    var maxNum = 16\r\n    //找到飞机里最小的一张牌\r\n    for (var i in mapA) {\r\n      if (Number(i) < maxNum) {\r\n        maxNum = Number(i)\r\n        listA = mapA[i]\r\n      }\r\n    }\r\n\r\n    //处理cardB\r\n    var mapB = {};\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (mapB.hasOwnProperty(cardB[i].card_data.value)) {\r\n        mapB[cardB[i].card_data.value].push(cardB[i]);\r\n      } else {\r\n        mapB[cardB[i].card_data.value] = [cardB[i]];\r\n      }\r\n    }\r\n\r\n    maxNum = 16\r\n    var listB = [];\r\n    for (var i in mapB) {\r\n      if (Number(i) < maxNum) {\r\n        maxNum = Number(i);\r\n        listB = mapB[i];\r\n      }\r\n    }\r\n\r\n    var result = compareThree(listA, listB)\r\n    return result\r\n  }\r\n\r\n  //飞机带2张单排\r\n  const comparePlaneWithOne = function (cardA, cardB) {\r\n    var result = false\r\n    var mapA = {};\r\n    var listA = [];\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (mapA.hasOwnProperty(cardA[i].card_data.value)) {\r\n        listA.push(cardA[i]);\r\n      } else {\r\n        mapA[cardA[i].card_data.value] = [cardA[i]];\r\n      }\r\n    }\r\n\r\n    var mapB = {};\r\n    var listB = [];\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (mapB.hasOwnProperty(cardB[i].card_data.value)) {\r\n        listB.push(cardB[i]);\r\n      } else {\r\n        mapB[cardB[i].card_data.value] = [cardB[i]];\r\n      }\r\n    }\r\n\r\n    result = comparePlan(listA, listB)\r\n    return result\r\n  }\r\n\r\n  //飞机带2对\r\n  const comparePlaneWithDouble = function (cardA, cardB) {\r\n    var mapA = {};\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (mapA.hasOwnProperty(cardA[i].card_data.value)) {\r\n        mapA[cardA[i].card_data.value].push(cardA[i]);\r\n      } else {\r\n        mapA[cardA[i].card_data.value] = [cardA[i]];\r\n      }\r\n    }\r\n    var mapB = {};\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (mapB.hasOwnProperty(cardB[i].card_data.value)) {\r\n        mapB[cardB[i].card_data.value].push(cardB[i]);\r\n      } else {\r\n        mapB[cardB[i].card_data.value] = [cardB[i]];\r\n      }\r\n    }\r\n\r\n    var listA = [];\r\n    for (var i in mapA) {\r\n      if (mapA[i].length === 3) {\r\n        for (var j = 0; j < mapA[i].length; j++) {\r\n          listA.push(mapA[i][j]);\r\n        }\r\n      }\r\n    }\r\n    console.log('list a = ' + JSON.stringify(listA));\r\n\r\n    var listB = [];\r\n    for (var i in mapB) {\r\n      if (mapB[i].length === 3) {\r\n        for (var j = 0; j < mapB[i].length; j++) {\r\n          listB.push(mapB[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    var result = comparePlan(listA, listB)\r\n    return result\r\n  }\r\n\r\n  const compareScroll = function (cardA, cardB) {\r\n    console.log(\"compareScroll\")\r\n    if (cardA.length != cardB.length) {\r\n      return false\r\n    }\r\n\r\n    var minNumA = 100;\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (cardA[i].card_data.value < minNumA) {\r\n        minNumA = cardA[i].card_data.value\r\n      }\r\n    }\r\n\r\n    var minNumB = 100;\r\n    for (let i = 0; i < cardB.length; i++) {\r\n      if (cardB[i].card_data.value < minNumB) {\r\n        minNumB = cardB[i].card_data.value;\r\n      }\r\n    }\r\n\r\n    console.log('min a = ' + minNumA);\r\n    console.log('min b = ' + minNumB);\r\n    if (minNumA <= minNumB) {\r\n      return true;\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  const compareDoubleScroll = function (cardA, cardB) {\r\n    var mapA = {};\r\n    var listA = [];\r\n    for (var i = 0; i < cardA.length; i++) {\r\n      if (mapA.hasOwnProperty(cardA[i].card_data.value)) {\r\n\r\n      } else {\r\n        mapA[cardA[i].card_data.value] = true;\r\n        listA.push(a[i]);\r\n      }\r\n    }\r\n\r\n    var mapB = {};\r\n    var listB = [];\r\n    for (var i = 0; i < cardB.length; i++) {\r\n      if (mapB.hasOwnProperty(cardB[i].card_data.value)) {\r\n\r\n      } else {\r\n        mapB[cardB[i].card_data.value] = true;\r\n        listB.push(cardB[i]);\r\n      }\r\n    }\r\n\r\n    console.log('list a = ' + JSON.stringify(listA));\r\n    console.log('list b = ' + JSON.stringify(listB));\r\n\r\n    return compareScroll(listA, listB);\r\n  }\r\n  //cardA上次出的牌\r\n  //cardB本次出的牌\r\n  //current_card_value当前牌型\r\n  const compare = function (cardA, cardB, current_card_value) {\r\n    var result = false\r\n    switch (current_card_value.name) {\r\n      case CardsValue.one.name:\r\n        result = compareOne(cardA, cardB)\r\n        break\r\n      case CardsValue.double.name:\r\n        result = compareDouble(cardA, cardB)\r\n        break\r\n      case CardsValue.three.name:\r\n        result = compareThree(cardA, cardB)\r\n        break\r\n      case CardsValue.boom.name:\r\n        result = compareBoom(cardA, cardB)\r\n        break\r\n      case CardsValue.kingboom.name:\r\n        result = compareBoomKing(cardA, cardB)\r\n        break\r\n      case CardsValue.planeWithOne.name:\r\n        result = comparePlanWithSing(cardA, cardB)\r\n        break\r\n      case CardsValue.planeWithTwo.name:\r\n        result = comparePlanWithTow(cardA, cardB)\r\n        break\r\n      case CardsValue.plane.name:\r\n        result = comparePlan(cardA, cardB)\r\n        break\r\n      case CardsValue.planeWithOne.name:\r\n        result = comparePlaneWithOne(cardA, cardB)\r\n        break\r\n      case CardsValue.planeWithTwo.name:\r\n        result = comparePlaneWithDouble(cardA, cardB)\r\n        break\r\n      case CardsValue.scroll.name:\r\n        result = compareScroll(cardA, cardB)\r\n        break\r\n      case CardsValue.doubleScroll.name:\r\n        result = compareDoubleScroll(cardA, cardB)\r\n        break\r\n      default:\r\n        console.log(\"no found card value!\")\r\n        result = false\r\n        break\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  that.compareWithCard = function (last_cards, current_cards) {\r\n    //last_cards[{\"index\":3,\"card_data\":{\"index\":3,\"value\":13,\"shape\":4}},\r\n    //{\"index\":0,\"card_data\":{\"index\":0,\"value\":13,\"shape\":1}}]\r\n    console.log(\"last_cards\" + JSON.stringify(last_cards))\r\n    console.log(\"current_cards\" + JSON.stringify(current_cards))\r\n    card_last_value = getCardValue(last_cards)\r\n    card_current_value = getCardValue(current_cards)\r\n    //console.log(\"card_last_value\"+JSON.stringify(card_last_value))\r\n    //console.log(\"card_current_value\"+JSON.stringify(card_current_value))\r\n    if (last_cards.value < current_cards.value) {\r\n      console.log(\"compareWithCard less\")\r\n      return true\r\n    } else if (last_cards.value == current_cards.value) {\r\n      //牌型必须相同\r\n      if (card_last_value.name != card_current_value.name) {\r\n        return false\r\n      }\r\n\r\n      var result = compare(last_cards, current_cards, card_last_value)\r\n\r\n      return result\r\n    } else {\r\n      return false\r\n    }\r\n\r\n\r\n    return true\r\n  }\r\n\r\n\r\n  that.IsCanPushs = function (cardList) {\r\n    if (isOneCard(cardList)) {\r\n      console.log(\"isOneCard sucess\")\r\n      return CardsValue.one;\r\n    }\r\n\r\n    if (IsDoubleCard(cardList)) {\r\n      console.log(\"IsDoubleCard sucess\")\r\n      return CardsValue.double\r\n    }\r\n\r\n    if (Isthree(cardList)) {\r\n      console.log(\"Isthree sucess\")\r\n      return CardsValue.three\r\n    }\r\n\r\n    if (IsThreeAndOne(cardList)) {\r\n      console.log(\"IsThreeAndOne sucess\")\r\n      return CardsValue.threeWithOne\r\n    }\r\n\r\n    if (IsThreeAndTwo(cardList)) {\r\n      console.log(\"IsThreeAndTwo sucess\")\r\n      return CardsValue.threeWithTwo\r\n    }\r\n\r\n    if (IsBoom(cardList)) {\r\n      console.log(\"IsBoom sucess\")\r\n      return CardsValue.boom\r\n    }\r\n\r\n    if (IsKingBoom(cardList)) {\r\n      console.log(\"IsKingBoom sucess\")\r\n      return CardsValue.kingboom\r\n    }\r\n\r\n    if (IsPlan(cardList)) {\r\n      console.log(\"IsPlan sucess\")\r\n      return CardsValue.plane\r\n    }\r\n\r\n    if (IsPlanWithSing(cardList)) {\r\n      console.log(\"IsPlanWithSing sucess\")\r\n      return CardsValue.planeWithOne\r\n    }\r\n\r\n    if (IsPlanWithDouble(cardList)) {\r\n      console.log(\"IsPlanWithDouble sucess\")\r\n      return CardsValue.planeWithTwo\r\n    }\r\n\r\n    if (IsShunzi(cardList)) {\r\n      console.log(\"IsShunzi sucess\")\r\n      return CardsValue.scroll\r\n    }\r\n\r\n    if (IsLianDui(cardList)) {\r\n      console.log(\"IsLianDui sucess\")\r\n      return CardsValue.DoubleScroll\r\n    }\r\n    //return false\r\n    return undefined\r\n  }\r\n\r\n  const getCardValue = that.IsCanPushs\r\n\r\n  return that\r\n}\r\nmodule.exports = carder()\r\n\r\n// example\r\n// [{ index: 7, value: 1, shape: 4 },\r\n// { index: 15, value: 3, shape: 4 },\r\n// { index: 0, value: 13, shape: 1 },\r\n// { index: 20, value: 5, shape: 1 },\r\n// { index: 5, value: 1, shape: 2 },\r\n// { index: 40, value: 9, shape: 1 },\r\n// { index: 37, value: 12, shape: 2 },\r\n// { index: 27, value: 6, shape: 4 },\r\n// { index: 14, value: 3, shape: 3 },\r\n// { index: 39, value: 12, shape: 4 },\r\n// { index: 2, value: 13, shape: 3 },\r\n// { index: 28, value: 7, shape: 1 },\r\n// { index: 35, value: 8, shape: 4 },\r\n// { index: 6, value: 1, shape: 3 },\r\n// { index: 42, value: 9, shape: 3 },\r\n// { index: 30, value: 7, shape: 3 },\r\n// { index: 43, value: 9, shape: 4 }]","import myglobal from \"../../mygolbal.js\"\r\nconst ddzData = require('ddzData')\r\nconst ddzConstants = require('ddzConstants')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    cards_sprite_atlas: cc.SpriteAtlas,\r\n\r\n  },\r\n\r\n  onLoad() {\r\n    this.flag = false\r\n    this.offset_y = 20\r\n\r\n    this.node.on(\"reset_card_flag\", function (event) {\r\n      if (this.flag) {\r\n        this.flag = false\r\n        this.node.y -= this.offset_y\r\n      }\r\n    }.bind(this))\r\n\r\n    // this.node.on(\"chu_card_succ\",function(event){\r\n    //    var chu_card_list = event\r\n    //    for(var i=0;i<chu_card_list.length;i++){\r\n    //     if(chu_card_list[i].caardIndex==this.caardIndex){\r\n    //         //this.runToCenter(chu_card_list[i])\r\n    //         //this.node.destory()\r\n    //     }\r\n    //    }\r\n    // }.bind(this))\r\n  },\r\n\r\n  runToCenter() {\r\n    //移动到屏幕中间，并带一个牌缩小的效果\r\n  },\r\n  start() {\r\n\r\n  },\r\n\r\n  init_data(data) {\r\n\r\n  },\r\n  setTouchEvent() {\r\n    if (this.userId == myglobal.playerData.userId) {\r\n      this.node.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n        // var gameScene_node = this.node.parent\r\n        // var room_state = gameScene_node.getComponent(\"gameScene\").roomstate\r\n        if (ddzData.gameState === ddzConstants.gameState.PLAYING) {\r\n          console.log(\"TOUCH_START id:\" + this.caardIndex)\r\n          if (!this.flag) {\r\n            this.flag = true\r\n            this.node.y += this.offset_y\r\n            //通知gameui层选定的牌\r\n            // var carddata = {\r\n            //   \"index\": this.caardIndex,\r\n            //   \"card_data\": this.card_data,\r\n            // }\r\n            // gameScene_node.emit(\"choose_card_event\", this.card_data)\r\n            $socket.emit('_chooseCard', this.card_data)\r\n          } else {\r\n            this.flag = false\r\n            this.node.y -= this.offset_y\r\n            //通知gameUI取消了那张牌\r\n            $socket.emit('_unchooseCard', this.caardIndex)\r\n            // gameScene_node.emit(\"unchoose_card_event\", this.caardIndex)\r\n          }\r\n        }\r\n      }.bind(this))\r\n    }\r\n  },\r\n  showCards(card, userId) {\r\n    //card.index是服务器生成card给对象设置的一副牌里唯一id\r\n    this.caardIndex = card.index\r\n    //传入参数 card={\"value\":5,\"shape\":1,\"index\":20}\r\n    this.card_data = card\r\n    if (userId) {\r\n      this.userId = userId //标识card属于的玩家\r\n    }\r\n    //服务器返回的是key(A-K),value对应的是资源的编号\r\n    const cardValue = {\r\n      \"12\": 1,\r\n      \"13\": 2,\r\n      \"1\": 3,\r\n      \"2\": 4,\r\n      \"3\": 5,\r\n      \"4\": 6,\r\n      \"5\": 7,\r\n      \"6\": 8,\r\n      \"7\": 9,\r\n      \"8\": 10,\r\n      \"9\": 11,\r\n      \"10\": 12,\r\n      \"11\": 13\r\n    };\r\n\r\n    // 黑桃： spade\r\n    // 红桃： heart\r\n    // 梅花： club\r\n    // 方片： diamond\r\n    // const CardShape = {\r\n    //     \"S\": 1,\r\n    //     \"H\": 2,\r\n    //     \"C\": 3,\r\n    //     \"D\": 4,\r\n    // };\r\n    const cardShape = {\r\n      \"1\": 3,\r\n      \"2\": 2,\r\n      \"3\": 1,\r\n      \"4\": 0\r\n    };\r\n    const kings = {\r\n      \"14\": 54,\r\n      \"15\": 53\r\n    };\r\n\r\n    var spriteKey = '';\r\n    if (card.shape) {\r\n      spriteKey = 'card_' + (cardShape[card.shape] * 13 + cardValue[card.value]);\r\n    } else {\r\n      spriteKey = 'card_' + kings[card.king];\r\n    }\r\n\r\n    this.node.getComponent(cc.Sprite).spriteFrame = this.cards_sprite_atlas.getSpriteFrame(spriteKey)\r\n    this.setTouchEvent()\r\n  }\r\n});\r\n","const audioManager = require('audioManager');\r\n\r\nconst common = {\r\n  // 声音管理\r\n  audio: audioManager,\r\n  // 获取指定位数的随机数\r\n  getRandomStr(count) {\r\n    var str = '';\r\n    for (var i = 0; i < count; i++) {\r\n      str += Math.floor(Math.random() * 10);\r\n    }\r\n    return str;\r\n  },\r\n  /**\r\n    * 产生随机整数，包含上下限值\r\n    * @param {Number} lower 下限\r\n    * @param {Number} upper 上限\r\n    * @return {Number} 返回在下限到上限之间的一个随机整数\r\n    */\r\n  random(lower, upper) {\r\n    return Math.round(Math.random() * (upper-lower) + lower)\r\n  }\r\n}\r\n\r\nmodule.exports = common\r\n","import myglobal from \"../../mygolbal.js\"\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  // onLoad () {},\r\n\r\n  start() {\r\n  },\r\n\r\n  // update (dt) {},\r\n  onBtnClose() {\r\n    this.node.destroy()\r\n  },\r\n  // 进入游戏房间\r\n  onButtonClick(event, value) {\r\n    const { bottom, rate } = defines.jdRoomConfig['rate_' + value]\r\n    const roomId = `${rate}_${bottom}_${Math.floor(Math.random() * 1000)}`\r\n    myglobal.playerData.bottom = bottom\r\n    myglobal.playerData.rate = rate\r\n    myglobal.playerData.roomId = roomId\r\n    cc.sys.localStorage.setItem('userData', JSON.stringify(myglobal.playerData))\r\n    cc.director.loadScene(\"gameScene\")\r\n    this.node.destroy()\r\n  }\r\n\r\n});\r\n","/**\r\n * @description 斗地主常量\r\n */\r\nmodule.exports = {\r\n  /**\r\n  * @description 游戏状态\r\n  */\r\n  gameState: {\r\n    INVALID: -1, // 无效\r\n    WAITREADY: 1,  // 进入房间，等待游戏\r\n    GAMESTART: 2,  //开始游戏，已准备\r\n    PUSHCARD: 3,   //发牌\r\n    ROBSTATE: 4,    //抢地主\r\n    SHOWBOTTOMCARD: 5, //显示底牌\r\n    PLAYING: 6,     //出牌阶段\r\n    GAMEEND: 7      // 游戏结束\r\n  },\r\n  /**\r\n   * @description 扑克牌纹理\r\n   */\r\n  _pokersFrame : null,\r\n  _chipsFrame : null,\r\n}","/**\r\n * Date: 2020/2/21\r\n * Author: \r\n * Desc:斗地主 数据层\r\n */\r\nconst ddzConstants = require('ddzConstants')\r\nconst DataNotify = require('DataNotify')\r\n\r\nmodule.exports = {\r\n  /**\r\n   * @description 当前游戏状态\r\n   */\r\n  gameState: -1,\r\n\r\n  initData() {\r\n    this.gameStateNotify = DataNotify.create(this, 'gameState', JSON.parse(cc.sys.localStorage.getItem('gameState')))\r\n    this.gameStateNotify.addListener(value => {\r\n      cc.sys.localStorage.setItem('gameState', value)\r\n    })\r\n  }\r\n}","const mygolbal = require('mygolbal')\r\nconst ddzConstants = require('ddzConstants')\r\nconst ddzData = require('ddzData')\r\nconst carder = require(\"carder\")\r\nconst AILogic = require(\"AILogic\")\r\nconst ddzServers = {\r\n  playersData: {}, // 玩家信息，包括机器人\r\n  // three_cards: [], // 扑克牌列表 [玩家, 机器1, 机器2, 底牌]\r\n  landlordIndex: 0, // 谁先开始抢地主\r\n  landlordNum: 0, // 抢地主次数\r\n  robplayer: [], // 复制一份房间内player,做抢地主操作\r\n  landlordId: '', // 当前地主id\r\n  /*\r\n    * 当前桌面牌信息\r\n    *  roundWinId 本轮当前赢牌的玩家userId\r\n    *  winCards 牌型信息\r\n    */\r\n  roundWinId: '',\r\n  winCards: null,\r\n  initServer() {\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.addListener(this.gameStateHandler, this)\r\n      $socket.on('canrob_state_notify', this.canrobStateNotify, this) // 抢地主消息\r\n      $socket.on('playAHandNotify', this.playAHandNotify, this) // 出牌消息\r\n      $socket.on('nextPlayerNotify', this.nextPlayerNotify, this) // 出牌消息\r\n    }\r\n  },\r\n  gameStateHandler(value) {\r\n    const states = ddzConstants.gameState\r\n    switch (value) {\r\n      case states.INVALID: // 无效\r\n        break\r\n      case states.WAITREADY: // 进入房间，等待游戏\r\n        this.roundWinId = ''\r\n        this.winCards = null\r\n        break\r\n      case states.GAMESTART: // 开始游戏\r\n        // 初始化玩家信息及牌组\r\n        this.playersData = this.initPlayerList()\r\n        setTimeout(() => { this.setGameState(states.PUSHCARD) }, 0)\r\n        break\r\n      case states.PUSHCARD: // 发牌\r\n        window.$socket.emit('pushcard_notify', this.playersData[mygolbal.playerData.userId].cardList)\r\n        setTimeout(() => { this.setGameState(states.ROBSTATE) }, 0)\r\n        break\r\n      case states.ROBSTATE: // 抢地主\r\n        this.landlordIndex = common.random(0, 2)\r\n        const id = this.playersData.players[this.landlordIndex] // 随机地主id\r\n        this.landlordId = ''\r\n        this.robplayer = []\r\n        this.landlordNum = 0\r\n        // 发布谁先开始抢地主\r\n        window.$socket.emit('canrob_notify', id)\r\n        break\r\n      case states.SHOWBOTTOMCARD: // 显示底牌\r\n        const landlordData = this.playersData[this.landlordId]\r\n        const cards = this.playersData.cards\r\n        landlordData.isLandlord = true\r\n        landlordData.cardList = landlordData.cardList.concat(cards)\r\n        window.$socket.emit('change_master_notify', {\r\n          masterId: this.landlordId,\r\n          cards\r\n        })\r\n        setTimeout(() => { this.setGameState(states.PLAYING) }, 0)\r\n        break\r\n      case states.PLAYING: // 出牌阶段\r\n        this.playCard(this.playersData[this.landlordId])\r\n        break\r\n      case states.GAMEEND: // 游戏结束\r\n        const userId = mygolbal.playerData.userId\r\n        const winPlayer = this.playersData[this.roundWinId]\r\n        const nextPlayer1 = winPlayer.nextPlayer\r\n        const nextPlayer2 = nextPlayer1.nextPlayer\r\n        let isWin = this.roundWinId === userId || winPlayer.isLandlord === this.playersData[userId].isLandlord\r\n        window.$socket.emit('gameEndNotify', {\r\n          isWin, // 是否胜利\r\n          otherPlayerCards: { // 其他玩家剩余手牌\r\n            [nextPlayer1.userId]: nextPlayer1.cardList,\r\n            [nextPlayer2.userId]: nextPlayer2.cardList\r\n          }\r\n        })\r\n        break\r\n    }\r\n  },\r\n  // 设置游戏状态\r\n  setGameState(state) {\r\n    ddzData.gameState = state\r\n  },\r\n  // 初始化玩家列表，包括机器人\r\n  initPlayerList() {\r\n    const { userId, rootList } = mygolbal.playerData\r\n    const rightPlayerId = rootList[0].userId\r\n    const leftPlayerId = rootList[1].userId\r\n    const cardList = carder.splitThreeCards() // 生成新牌\r\n    console.log('新牌', cardList)\r\n    const playersData = {\r\n      players: [userId, rightPlayerId, leftPlayerId], // 当前房间玩家id集合\r\n      cards: cardList[3], // 底牌\r\n      // 玩家\r\n      [userId]: {\r\n        isLandlord: false,\r\n        userId,\r\n        cardList: cardList[0],\r\n      },\r\n      // 右边机器人\r\n      [rightPlayerId]: {\r\n        isLandlord: false,\r\n        userId: rightPlayerId,\r\n        cardList: cardList[1],\r\n      },\r\n      // 左边机器人\r\n      [leftPlayerId]: {\r\n        isLandlord: false,\r\n        userId: leftPlayerId,\r\n        cardList: cardList[2],\r\n      }\r\n    }\r\n    // 指定玩家顺序\r\n    playersData[userId].nextPlayer = playersData[rightPlayerId]\r\n    playersData[rightPlayerId].nextPlayer = playersData[leftPlayerId]\r\n    playersData[leftPlayerId].nextPlayer = playersData[userId]\r\n\r\n    return playersData\r\n  },\r\n  // 抢地主通知\r\n  canrobStateNotify({ userId, state }) {\r\n    this.landlordNum++\r\n    const robList = this.robplayer\r\n    state === qian_state.qiang && this.landlordNum <= 3 && robList.push(userId)\r\n    if (this.landlordNum < 3) {\r\n      // 第一轮抢地主\r\n      const nextId = this.playersData.players[++this.landlordIndex % 3]\r\n      window.$socket.emit('canrob_notify', nextId)\r\n    } else if (robList.length) {\r\n      // 第二轮抢地主\r\n      const [player1, player2, player3] = robList\r\n      const robNum = robList.length\r\n      if (robNum === 1) {\r\n        this.landlordId = player1\r\n      }\r\n      if (robNum === 2) {\r\n        if (player1 === userId) {\r\n          this.landlordId = state === qian_state.qiang ? player1 : player2\r\n        } else {\r\n          window.$socket.emit('canrob_notify', player1)\r\n        }\r\n      }\r\n      if (robNum === 3) {\r\n        if (player1 === userId) {\r\n          if (state === qian_state.qiang) {\r\n            this.landlordId = player1\r\n          } else {\r\n            window.$socket.emit('canrob_notify', player2)\r\n          }\r\n        } else if (player2 === userId) {\r\n          this.landlordId = state === qian_state.qiang ? player2 : player3\r\n        } else {\r\n          window.$socket.emit('canrob_notify', player1)\r\n        }\r\n      }\r\n    } else {\r\n      // 无人抢地主,重新开始\r\n      cc.director.loadScene('gameScene')\r\n      setTimeout(() => {\r\n        this.setGameState(ddzConstants.gameState.PUSHCARD)\r\n      }, 600)\r\n    }\r\n    // 确定地主后切换游戏状态\r\n    this.landlordId && this.setGameState(ddzConstants.gameState.SHOWBOTTOMCARD)\r\n  },\r\n  // 下一位玩家出牌\r\n  nextPlayerNotify(userId) {\r\n    this.playCard(this.playersData[userId].nextPlayer)\r\n  },\r\n  // 发布出牌通知\r\n  playCard(player) {\r\n    console.log('出牌', player)\r\n    const isOver = this.roundWinId && !this.playersData[this.roundWinId].cardList.length\r\n    if (isOver) {\r\n      // 游戏结束\r\n      this.setGameState(ddzConstants.gameState.GAMEEND)\r\n      return\r\n    }\r\n    if (player.userId === mygolbal.playerData.userId) {\r\n      // 自己出牌\r\n      window.$socket.emit('selfPlayAHandNotify')\r\n    } else {\r\n      // 机器出牌\r\n      const ai = new AILogic(player)\r\n      let result = null\r\n      if (!this.roundWinId || this.roundWinId === player.userId) {\r\n        // 如果本轮出牌赢牌是自己：出牌\r\n        result = ai.play(this.playersData[this.landlordId].cardList.length)\r\n        console.log(player.userId, 'AI出牌', result)\r\n      } else {\r\n        // 跟牌，根据上一轮赢家的牌型、是不是地主、还剩几张牌\r\n        const playerData = this.playersData[this.roundWinId]\r\n        const isLandlord = playerData.userId === this.landlordId\r\n        result = ai.follow(this.winCards, isLandlord, playerData.cardList.length);\r\n        console.log(player.userId, 'AI跟牌', result)\r\n      }\r\n      window.$socket.emit('rootPlayAHandNotify', {\r\n        userId: player.userId,\r\n        cards: result ? result.cardList : []\r\n      })\r\n      if (result) {\r\n        // 将牌显示到出牌区域上\r\n        for (let i = 0; i < result.cardList.length; i++) {\r\n          // var c = self.game.add.clone(self.cardPrefab, area);\r\n          // c.getScript('qc.engine.CardUI').show(result.cardList[i], false);\r\n          // c.interactive = false;\r\n          // 删除手牌信息\r\n          for (var j = 0; j < player.cardList.length; j++) {\r\n            if (player.cardList[j].val === result.cardList[i].val\r\n              && player.cardList[j].shape === result.cardList[i].shape) {\r\n              player.cardList.splice(j, 1)\r\n              break\r\n            }\r\n          }\r\n        }\r\n        // 出炸弹积分翻倍(炸弹或者王炸)\r\n        if (result.cardKind === G.gameRule.BOMB || result.cardKind === G.gameRule.KING_BOMB) {\r\n          // var rate = parseInt(window.playUI.ratePanel.text)\r\n          // window.playUI.ratePanel.text = (rate * 2) + '';\r\n        }\r\n        this.roundWinId = player.userId\r\n        delete result.cardList;\r\n        this.winCards = result\r\n        // window.playUI.reDraw();\r\n      }\r\n    }\r\n  },\r\n  // 玩家自己出牌消息\r\n  playAHandNotify({ userId, cards }, callback) {\r\n    console.log(cards)\r\n    const type = this.getReadyCardsKind(cards)\r\n    console.log(type)\r\n    // 校验出牌是否合格\r\n    if (!type) {\r\n      callback && callback({\r\n        state: 0\r\n      })\r\n      return\r\n    }\r\n    // 炸弹积分翻倍\r\n    if(type.cardKind === G.gameRule.BOMB || type.cardKind === G.gameRule.KING_BOMB){\r\n      // var rate = parseInt(window.playUI.ratePanel.text);\r\n      // window.playUI.ratePanel.text = (rate * 2) + '';\r\n    }\r\n    this.winCards = type;\r\n    this.roundWinId = userId\r\n    callback && callback({\r\n      state: 1\r\n    })\r\n    // 删除玩家出的牌\r\n    const selfCards = this.playersData[userId].cardList\r\n    for (let i = 0; i < cards.length; i++) {\r\n      for (let j = 0; j < selfCards.length; j++) {\r\n        cards[i].val === selfCards[j].val && cards[i].shape === selfCards[j].shape && selfCards.splice(j, 1)\r\n      }\r\n    }\r\n    this.nextPlayerNotify(userId)\r\n  },\r\n  /**\r\n  * @description 判断玩家选中的牌是否是正确牌型，出牌需要符合规则，跟牌需要牌型可以大过上家\r\n  * @method getReadyCardsKind\r\n  * @param {List} cardList 要检查的牌型列表\r\n  * @return {Boolean}       [description]\r\n  */\r\n  getReadyCardsKind(cardList = []) {\r\n    if (!cardList.length) return null;\r\n    const type = G.gameRule.typeJudge(cardList);\r\n    if (type) {//正确牌型，出牌\r\n      if (this.roundWinId && this.roundWinId !== myglobal.playerData.userId) {//跟牌\r\n        return (function (winc, ownc) {//判断自己的牌是否合法且应该上家的牌\r\n          //王炸大过任何牌\r\n          //炸弹可大其他牌型\r\n          //同牌型大\r\n          if (ownc.cardKind === G.gameRule.KING_BOMB\r\n            || (ownc.cardKind === G.gameRule.BOMB && winc.cardKind != G.gameRule.BOMB)\r\n            || (ownc.cardKind === winc.cardKind && ownc.size === winc.size && ownc.val > winc.val)) {\r\n            return type;\r\n          }\r\n          return null;\r\n        }(this.winCards, type));\r\n      } else {\r\n        return type;\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n}\r\nexport default ddzServers\r\n","const eventLister = function (obj) {\r\n  var register = {}\r\n\r\n  obj.on = function (type, callback, target) {\r\n    const listener = {\r\n      callback,\r\n      target\r\n    }\r\n    if (register.hasOwnProperty(type)) {\r\n      cc.assert(callback)\r\n      for (const listener of register[type]) {\r\n        if (target === listener.target) {\r\n          return\r\n        }\r\n      }\r\n      register[type].push(listener);\r\n    } else {\r\n      register[type] = [listener]\r\n    }\r\n  }\r\n  obj.emit = function(type) {\r\n    if (register.hasOwnProperty(type)) {\r\n      const methodList = register[type]\r\n      for (var i = 0; i < methodList.length; ++i) {\r\n        const {callback, target} = methodList[i]\r\n        const args = []\r\n        for (let i = 1; i < arguments.length; ++i) {\r\n          args.push(arguments[i])\r\n        }\r\n        callback.apply(target, args)\r\n      }\r\n    }\r\n    \r\n  }\r\n  obj.remove = function (type, target) {\r\n    register[type] = register[type].filter(e => e.target !== target)\r\n  }\r\n  obj.removeLister = function (type) {\r\n    register[type] = []\r\n  }\r\n\r\n  obj.removeAllLister = function () {\r\n    register = {}\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nexport default eventLister","//游戏规则\r\nvar GameRule = function () {\r\n\r\n};\r\n\r\n/**\r\n * 牌型判断\r\n * @method function\r\n * @param  {[shape]} cards [description]\r\n * @return {[shape]}       [description]\r\n */\r\nGameRule.prototype.typeJudge = function (cards) {\r\n  var self = this, len = cards.length;\r\n  cards.sort((a, b) => b.val - a.val);\r\n  switch (len) {\r\n    case 1:\r\n      return { 'cardKind': self.ONE, 'val': cards[0].val, 'size': len };\r\n    case 2:\r\n      if (self.isPairs(cards))\r\n        return { 'cardKind': self.PAIRS, 'val': cards[0].val, 'size': len };\r\n      else if (self.isKingBomb(cards))\r\n        return { 'cardKind': self.KING_BOMB, 'val': cards[0].val, 'size': len };\r\n      else\r\n        return null;\r\n    case 3:\r\n      if (self.isThree(cards))\r\n        return { 'cardKind': self.THREE, 'val': cards[0].val, 'size': len };\r\n      else\r\n        return null;\r\n    case 4:\r\n      if (self.isThreeWithOne(cards)) {\r\n        return { 'cardKind': self.THREE_WITH_ONE, 'val': self.getMaxVal(cards, 3), 'size': len };\r\n      } else if (self.isBomb(cards)) {\r\n        return { 'cardKind': self.BOMB, 'val': cards[0].val, 'size': len };\r\n      }\r\n      return null;\r\n    default:\r\n      if (self.isProgression(cards))\r\n        return { 'cardKind': self.PROGRESSION, 'val': cards[0].val, 'size': len };\r\n      else if (self.isProgressionPairs(cards))\r\n        return { 'cardKind': self.PROGRESSION_PAIRS, 'val': cards[0].val, 'size': len };\r\n      else if (self.isThreeWithPairs(cards))\r\n        return { 'cardKind': self.THREE_WITH_PAIRS, 'val': self.getMaxVal(cards, 3), 'size': len };\r\n      else if (self.isPlane(cards))\r\n        return { 'cardKind': self.PLANE, 'val': self.getMaxVal(cards, 3), 'size': len };\r\n      else if (self.isPlaneWithOne(cards))\r\n        return { 'cardKind': self.PLANE_WITH_ONE, 'val': self.getMaxVal(cards, 3), 'size': len };\r\n      else if (self.isPlaneWithPairs(cards))\r\n        return { 'cardKind': self.PLANE_WITH_PAIRS, 'val': self.getMaxVal(cards, 3), 'size': len };\r\n      else if (self.isFourWithTwo(cards))\r\n        return { 'cardKind': self.FOUR_WITH_TWO, 'val': self.getMaxVal(cards, 4), 'size': len };\r\n      else if (self.isFourWithPairs(cards))\r\n        return { 'cardKind': self.FOUR_WITH_TWO_PAIRS, 'val': self.getMaxVal(cards, 4), 'size': len };\r\n      else\r\n        return null;\r\n\r\n  }\r\n\r\n};\r\n//是否是对子\r\nGameRule.prototype.isPairs = function (cards) {\r\n  return cards.length == 2 && cards[0].val === cards[1].val;\r\n};\r\n//是否是三根\r\nGameRule.prototype.isThree = function (cards) {\r\n  return cards.length == 3 && cards[0].val === cards[1].val && cards[1].val === cards[2].val;\r\n};\r\n//是否是三带一\r\nGameRule.prototype.isThreeWithOne = function (cards) {\r\n  if (cards.length != 4) return false;\r\n  var c = this.valCount(cards);\r\n  return c.length === 2 && (c[0].count === 3 || c[1].count === 3);\r\n};\r\n//是否是三带一对\r\nGameRule.prototype.isThreeWithPairs = function (cards) {\r\n  if (cards.length != 5) return false;\r\n  var c = this.valCount(cards);\r\n  return c.length === 2 && (c[0].count === 3 || c[1].count === 3);\r\n};\r\n//是否是顺子\r\nGameRule.prototype.isProgression = function (cards) {\r\n  // if(cards.length < 5 || cards[0].val === 15) return false;\r\n  // for (var i = 0; i < cards.length; i++) {\r\n  //     if(i != (cards.length - 1) && (cards[i].val - 1) != cards[i + 1].val){\r\n  //         return false;\r\n  //     }\r\n  // }\r\n  if (cards.length < 5 || cards.length > 12) return false\r\n  var tmp_cards = cards\r\n  //不能有2或者大小王\r\n  for (var i = 0; i < tmp_cards.length; i++) {\r\n    if (tmp_cards[i].value == 13 || tmp_cards[i].value == 14\r\n      || tmp_cards[i].value == 15) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  // 是否连续\r\n  for (var i = 0; i < tmp_cards.length; i++) {\r\n    if (i === tmp_cards.length -1) break\r\n    var p1 = Number(tmp_cards[i].value)\r\n    var p2 = Number(tmp_cards[i + 1].value)\r\n    if (Math.abs(p1 - p2) != 1) {\r\n      return false\r\n    }\r\n\r\n  }\r\n\r\n  return true;\r\n};\r\n//是否是连对\r\nGameRule.prototype.isProgressionPairs = function (cards) {\r\n  // if(cards.length < 6 || cards.length % 2 != 0 || cards[0].val === 15) return false;\r\n  // for (var i = 0; i < cards.length; i += 2) {\r\n  //     if(i != (cards.length - 2) && (cards[i].val != cards[i + 1].val || (cards[i].val - 1) != cards[i + 2].val)){\r\n  //         return false;\r\n  //     }\r\n  // }\r\n  // return true;\r\n  if (cards.length < 6 || cards.length > 20 || cards.length % 2) {\r\n    return false\r\n  }\r\n\r\n  //不能包括大小王,和2\r\n  for (var i = 0; i < cards.length; i++) {\r\n    if (cards[i].value == 14\r\n      || cards[i].value == 15 || cards[i].value == 13) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  var map = {}\r\n  for (var i = 0; i < cards.length; i++) {\r\n    if (map.hasOwnProperty(cards[i].value)) {\r\n      map[cards[i].value]++\r\n    } else {\r\n      map[cards[i].value] = 1\r\n    }\r\n  }\r\n\r\n  //相同牌只能是2张\r\n  for (var key in map) {\r\n    if (map[key] != 2) {\r\n      return false\r\n    }\r\n  }\r\n  var keys = Object.keys(map)\r\n  if (keys.length < 3) {\r\n    return false\r\n  }\r\n\r\n  //对子之间相减绝对值只能是1\r\n  for (var i = 0; i < keys.length; i++) {\r\n    if (i === keys.length - 1) break\r\n    var p1 = Number(keys[i])\r\n    var p2 = Number(keys[i + 1])\r\n    if (Math.abs(p1 - p2) != 1) {\r\n      return false\r\n    }\r\n\r\n  }\r\n\r\n  return true\r\n};\r\n//是否是飞机\r\nGameRule.prototype.isPlane = function (cards) {\r\n  if (cards.length < 6 || cards.length % 3 != 0 || cards[0].val === 15) return false;\r\n  for (var i = 0; i < cards.length; i += 3) {\r\n    if (i != (cards.length - 3) && (cards[i].val != cards[i + 1].val || cards[i].val != cards[i + 2].val || (cards[i].val - 1) != cards[i + 3].val)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//是否是飞机带单\r\nGameRule.prototype.isPlaneWithOne = function (cards) {\r\n  if (cards.length < 8 || cards.length % 4 != 0) return false;\r\n  var c = this.valCount(cards),\r\n    threeList = [],\r\n    threeCount = cards.length / 4;\r\n  for (var i = 0; i < c.length; i++) {\r\n    if (c[i].count == 3) {\r\n      threeList.push(c[i]);\r\n    }\r\n  }\r\n  if (threeList.length != threeCount || threeList[0].val === 15) {//检测三根数量和不能为2\r\n    return false;\r\n  }\r\n  for (let i = 0; i < threeList.length; i++) {//检测三根是否连续\r\n    if (i != threeList.length - 1 && threeList[i].val - 1 != threeList[i + 1].val) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//是否是飞机带对\r\nGameRule.prototype.isPlaneWithPairs = function (cards) {\r\n  if (cards.length < 10 || cards.length % 5 != 0) return false;\r\n  var c = this.valCount(cards),\r\n    threeList = [],\r\n    pairsList = [],\r\n    groupCount = cards.length / 5;\r\n  for (var i = 0; i < c.length; i++) {\r\n    if (c[i].count == 3) {\r\n      threeList.push(c[i]);\r\n    }\r\n    else if (c[i].count == 2) {\r\n      pairsList.push(c[i]);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  if (threeList.length != groupCount || pairsList.length != groupCount || threeList[0].val === 15) {//检测三根数量和对子数量和不能为2\r\n    return false;\r\n  }\r\n  for (let i = 0; i < threeList.length; i++) {//检测三根是否连续\r\n    if (i != threeList.length - 1 && threeList[i].val - 1 != threeList[i + 1].val) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//是否是四带二\r\nGameRule.prototype.isFourWithTwo = function (cards) {\r\n  var c = this.valCount(cards);\r\n  if (cards.length != 6 || c.length > 3) return false;\r\n  for (var i = 0; i < c.length; i++) {\r\n    if (c[i].count === 4)\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n//是否是四带两个对\r\nGameRule.prototype.isFourWithPairs = function (cards) {\r\n  if (cards.length != 8) return false;\r\n  var c = this.valCount(cards);\r\n  if (c.length != 3) return false;\r\n  for (var i = 0; i < c.length; i++) {\r\n    if (c[i].count != 4 && c[i].count != 2)\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n//是否是炸弹\r\nGameRule.prototype.isBomb = function (cards) {\r\n  return cards.length === 4 && cards[0].val === cards[1].val && cards[0].val === cards[2].val && cards[0].val === cards[3].val;\r\n};\r\n//是否是王炸\r\nGameRule.prototype.isKingBomb = function (cards) {\r\n  return cards.length === 2 && cards[0].shape == '0' && cards[1].shape == '0';\r\n};\r\n/**\r\n * 获取min到max之间的随机整数，min和max值都取得到\r\n * @param  {number} min - 最小值\r\n * @param  {number} max - 最大值\r\n * @return {number}\r\n */\r\nGameRule.prototype.random = function (min, max) {\r\n  min = min == null ? 0 : min;\r\n  max = max == null ? 1 : max;\r\n  var delta = (max - min) + 1;\r\n  return Math.floor(Math.random() * delta + min);\r\n};\r\n\r\n/**\r\n * 牌统计，统计各个牌有多少张，比如2张A，一张8\r\n * @param  {list} cards - 要统计的牌\r\n * @return {object array} val：值，count：数量\r\n */\r\nGameRule.prototype.valCount = function (cards) {\r\n  var result = [];\r\n  var addCount = function (result, v) {\r\n    for (var i = 0; i < result.length; i++) {\r\n      if (result[i].val == v) {\r\n        result[i].count++;\r\n        return;\r\n      }\r\n    }\r\n    result.push({ 'val': v, 'count': 1 });\r\n  };\r\n  for (var i = 0; i < cards.length; i++) {\r\n    addCount(result, cards[i].val);\r\n  }\r\n  return result;\r\n};\r\n/**\r\n * 获取指定张数的最大牌值\r\n * @param  {list} cards - 牌\r\n * @param  {list} cards - 张数\r\n * @return 值\r\n */\r\nGameRule.prototype.getMaxVal = function (cards, n) {\r\n  var c = this.valCount(cards);\r\n  var max = 0;\r\n  for (var i = 0; i < c.length; i++) {\r\n    if (c[i].count === n && c[i].val > max) {\r\n      max = c[i].val;\r\n    }\r\n  }\r\n  return max;\r\n};\r\n\r\n\r\n/**\r\n * 卡牌排序\r\n * @method cardSort\r\n * @param  {Object} a [description]\r\n * @param  {Object} b [description]\r\n * @return 1 : a < b ,-1 a : > b   [description]\r\n */\r\nGameRule.prototype.cardSort = function (a, b) {\r\n  var va = parseInt(a.val);\r\n  var vb = parseInt(b.val);\r\n  if (va === vb) {\r\n    return a.shape > b.shape ? 1 : -1;\r\n  } else if (va > vb) {\r\n    return -1;\r\n  } else {\r\n    return 1;\r\n  }\r\n};\r\n/**\r\n * 牌型枚举\r\n */\r\nGameRule.prototype.ONE = 1;\r\nGameRule.prototype.PAIRS = 2;\r\nGameRule.prototype.THREE = 3;\r\nGameRule.prototype.THREE_WITH_ONE = 4;\r\nGameRule.prototype.THREE_WITH_PAIRS = 5;\r\nGameRule.prototype.PROGRESSION = 6;\r\nGameRule.prototype.PROGRESSION_PAIRS = 7;\r\nGameRule.prototype.PLANE = 8;\r\nGameRule.prototype.PLANE_WITH_ONE = 9;\r\nGameRule.prototype.PLANE_WITH_PAIRS = 10;\r\nGameRule.prototype.FOUR_WITH_TWO = 11;\r\nGameRule.prototype.FOUR_WITH_TWO_PAIRS = 12;\r\nGameRule.prototype.BOMB = 13;\r\nGameRule.prototype.KING_BOMB = 14;\r\n/**\r\n * 错误提示\r\n */\r\nGameRule.prototype.MSG_NO_SELECT = '请选择要出的牌';\r\nGameRule.prototype.MSG_ERROR_TYPE = '您选择的牌不符合游戏规则';\r\nGameRule.prototype.MSG_NO_ROROB_RESTART = '所有玩家均未叫分，重新发牌';\r\n\r\n//桌位状态\r\nGameRule.prototype.DESK_STATUS_READY = 1;\r\nGameRule.prototype.DESK_STATUS_ROB = 2;\r\nGameRule.prototype.DESK_STATUS_PLAY = 3;\r\n\r\nmodule.exports = GameRule\r\n","import myglobal from \"../mygolbal.js\"\r\nconst ddzConstants = require('ddzConstants')\r\nconst ddzData = require('ddzData')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n  properties: {\r\n    bjMusic: {\r\n      type: cc.AudioClip, // 背景音乐\r\n      default: null,     // object's default value is null\r\n    },\r\n    di_label: cc.Label,\r\n    beishu_label: cc.Label,\r\n    roomid_label: cc.Label,\r\n    player_node_prefabs: cc.Prefab,\r\n    btn_ready: cc.Node, // 准备按钮\r\n    //绑定玩家座位,下面有3个子节点\r\n    players_seat_pos: cc.Node,\r\n    gameUiNode: cc.Node\r\n  },\r\n  onLoad() {\r\n    ddzData.gameState = ddzConstants.gameState.WAITREADY\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.addListener(this.gameStateHandler, this)\r\n    }\r\n    this.playerNodeList = []\r\n    const { roomId } = myglobal.playerData\r\n    const [rate, bottom] = roomId.split('_')\r\n    myglobal.playerData.rate = rate\r\n    myglobal.playerData.bottom = bottom\r\n\r\n    this.roomid_label.string = defines.roomNames[rate - 1]\r\n    this.beishu_label.string = \"倍数：\" + rate\r\n    this.di_label.string = \"底：\" + bottom\r\n\r\n    this.btn_ready.active = ddzData.gameState < ddzConstants.gameState.GAMESTART // 准备按钮\r\n    if (isopen_sound) {\r\n      cc.audioEngine.stopAll()\r\n      // cc.audioEngine.play(this.bjMusic, true)\r\n    }\r\n    this.addPlayerNode(myglobal.playerData)\r\n    this.addPlayerNode(myglobal.playerData.rootList[0])\r\n    this.addPlayerNode(myglobal.playerData.rootList[1])\r\n    //监听，给其他玩家发牌(内部事件)\r\n    this.node.on(\"pushcard_other_event\", function () {\r\n      console.log('其他玩家发牌')\r\n      for (let i = 0; i < this.playerNodeList.length; i++) {\r\n        const node = this.playerNodeList[i]\r\n        if (node) {\r\n          //给playernode节点发送事件\r\n          node.emit(\"push_card_event\")\r\n        }\r\n      }\r\n    }.bind(this))\r\n\r\n    //监听房间状态改变事件\r\n    // myglobal.socket.onRoomChangeState(function (data) {\r\n    //   //回调的函数参数是进入房间用户消息\r\n    //   console.log(\"onRoomChangeState:\" + data)\r\n    //   this.roomstate = data\r\n    // }.bind(this))\r\n    // 抢地主\r\n    // this.node.on(\"canrob_event\", function (event) {\r\n    //   console.log(\"gamescene canrob_event:\" + event)\r\n    //   //通知给playernode子节点\r\n    //   for (var i = 0; i < this.playerNodeList.length; i++) {\r\n    //     var node = this.playerNodeList[i]\r\n    //     if (node) {\r\n    //       //给playernode节点发送事件\r\n    //       node.emit(\"playernode_canrob_event\", event)\r\n    //     }\r\n    //   }\r\n    // }.bind(this))\r\n\r\n    // this.node.on(\"choose_card_event\", function (event) {\r\n    //   this.gameUiNode.emit(\"choose_card_event\", event)\r\n    // }.bind(this))\r\n\r\n    // this.node.on(\"unchoose_card_event\", function (event) {\r\n    //   this.gameUiNode.emit(\"unchoose_card_event\", event)\r\n    // }.bind(this))\r\n    //监听给玩家添加三张底牌\r\n    // this.node.on(\"add_three_card\",function(event){\r\n    //     console.log(\"add_three_card:\"+event)\r\n    //     for(var i=0;i<this.playerNodeList.length;i++){\r\n    //         var node = this.playerNodeList[i]\r\n    //         if(node){\r\n    //             //给playernode节点发送事件\r\n    //             node.emit(\"playernode_add_three_card\",event)\r\n    //         }\r\n    //     }\r\n    // }.bind(this))\r\n    return\r\n\r\n    myglobal.socket.request_enter_room({}, function (err, result) {\r\n      console.log(\"enter_room_resp\" + JSON.stringify(result))\r\n      if (err != 0) {\r\n        console.log(\"enter_room_resp err:\" + err)\r\n      } else {\r\n\r\n        //enter_room成功\r\n        //notify ={\"seatid\":1,\"playerdata\":[{\"accountid\":\"2117836\",\"userName\":\"tiny543\",\"avatarUrl\":\"http://xxx\",\"goldcount\":1000}]}\r\n        var seatid = result.seatindex //自己在房间里的seatid\r\n        this.playerdata_list_pos = []  //3个用户创建一个空用户列表\r\n        this.setPlayerSeatPos(seatid)\r\n\r\n        var playerdata_list = result.playerdata\r\n        var roomId = result.roomId\r\n        this.roomid_label.string = \"房间号:\" + roomId\r\n        myglobal.playerData.housemanageid = result.housemanageid\r\n\r\n        for (var i = 0; i < playerdata_list.length; i++) {\r\n          //consol.log(\"this----\"+this)\r\n          this.addPlayerNode(playerdata_list[i])\r\n        }\r\n\r\n\r\n      }\r\n      var gamebefore_node = this.node.getChildByName(\"gamebeforeUI\")\r\n      gamebefore_node.emit(\"init\")\r\n    }.bind(this))\r\n\r\n    //在进入房间后，注册其他玩家进入房间的事件\r\n    myglobal.socket.onPlayerJoinRoom(function (join_playerdata) {\r\n      //回调的函数参数是进入房间用户消息\r\n      console.log(\"onPlayerJoinRoom:\" + JSON.stringify(join_playerdata))\r\n      this.addPlayerNode(join_playerdata)\r\n    }.bind(this))\r\n\r\n    //回调参数是发送准备消息的accountid\r\n    myglobal.socket.onPlayerReady(function (data) {\r\n      console.log(\"-------onPlayerReady:\" + data)\r\n      for (var i = 0; i < this.playerNodeList.length; i++) {\r\n        var node = this.playerNodeList[i]\r\n        if (node) {\r\n          node.emit(\"player_ready_notify\", data)\r\n        }\r\n      }\r\n    }.bind(this))\r\n\r\n    myglobal.socket.onGameStart(function () {\r\n      for (var i = 0; i < this.playerNodeList.length; i++) {\r\n        var node = this.playerNodeList[i]\r\n        if (node) {\r\n          node.emit(\"gamestart_event\")\r\n        }\r\n      }\r\n\r\n      //隐藏gamebeforeUI节点\r\n      var gamebeforeUI = this.node.getChildByName(\"gamebeforeUI\")\r\n      if (gamebeforeUI) {\r\n        gamebeforeUI.active = false\r\n      }\r\n    }.bind(this))\r\n\r\n    //监听服务器玩家抢地主消息\r\n    // myglobal.socket.onRobState(function (event) {\r\n    //   console.log(\"-----onRobState\" + JSON.stringify(event))\r\n    //   //onRobState{\"accountid\":\"2162866\",\"state\":1}\r\n    //   for (var i = 0; i < this.playerNodeList.length; i++) {\r\n    //     var node = this.playerNodeList[i]\r\n    //     if (node) {\r\n    //       //给playernode节点发送事件\r\n    //       node.emit(\"playernode_rob_state_event\", event)\r\n    //     }\r\n    //   }\r\n    // }.bind(this))\r\n\r\n    //注册监听服务器确定地主消息\r\n    myglobal.socket.onChangeMaster(function (event) {\r\n      console.log(\"onChangeMaster\" + event)\r\n      //保存一下地主id\r\n      myglobal.playerData.masterUserId = event\r\n      for (var i = 0; i < this.playerNodeList.length; i++) {\r\n        var node = this.playerNodeList[i]\r\n        if (node) {\r\n          //给playernode节点发送事件\r\n          node.emit(\"playernode_changemaster_event\", event)\r\n        }\r\n      }\r\n    }.bind(this))\r\n\r\n    //注册监听服务器显示底牌消息\r\n    // myglobal.socket.onShowBottomCard(function (event) {\r\n    //   console.log(\"onShowBottomCard---------\" + event)\r\n    //   this.gameUiNode.emit(\"show_bottom_card_event\", event)\r\n    // }.bind(this))\r\n  },\r\n  start() {\r\n    $socket.on('change_master_notify', this.masterNotify, this)\r\n  },\r\n  onDestroy() {\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.removeListener(this.gameStateHandler, this)\r\n    }\r\n    $socket.remove('change_master_notify', this)\r\n  },\r\n  // 通知谁是地主, 并显示底牌\r\n  masterNotify({ masterId, cards }) {\r\n    // 必须先设置全局地主id\r\n    myglobal.playerData.masterUserId = masterId\r\n    // 显示底牌\r\n    this.gameUiNode.emit(\"show_bottom_card_event\", cards)\r\n    for (var i = 0; i < this.playerNodeList.length; i++) {\r\n      var node = this.playerNodeList[i]\r\n      if (node) {\r\n        // 给playernode节点发送事件\r\n        node.emit(\"playernode_changemaster_event\", masterId)\r\n      }\r\n    }\r\n  },\r\n  gameStateHandler(state) {\r\n    if (state === ddzConstants.gameState.WAITREADY) {\r\n      this.btn_ready.active = true\r\n    }\r\n  },\r\n  // 返回大厅\r\n  onGoback() {\r\n    ddzData.gameState = ddzConstants.gameState.INVALID\r\n    myglobal.playerData.roomId = ''\r\n    cc.sys.localStorage.setItem('userData', JSON.stringify(myglobal.playerData))\r\n    cc.director.loadScene(\"hallScene\")\r\n  },\r\n  // 准备\r\n  onBtnReadey(event) {\r\n    this.btn_ready.active = false\r\n    this.playerNodeList.forEach(node => {\r\n      node.emit(\"gamestart_event\")\r\n    });\r\n    ddzData.gameState = ddzConstants.gameState.GAMESTART\r\n  },\r\n  //seat_index自己在房间的位置id\r\n  // setPlayerSeatPos(seat_index) {\r\n  //   if (seat_index < 1 || seat_index > 3) {\r\n  //     console.log(\"seat_index error\" + seat_index)\r\n  //     return\r\n  //   }\r\n\r\n  //   console.log(\"setPlayerSeatPos seat_index:\" + seat_index)\r\n\r\n  //   //界面位置转化成逻辑位置\r\n  //   switch (seat_index) {\r\n  //     case 1:\r\n  //       this.playerdata_list_pos[1] = 0\r\n  //       this.playerdata_list_pos[2] = 1\r\n  //       this.playerdata_list_pos[3] = 2\r\n  //       break\r\n  //     case 2:\r\n\r\n\r\n  //       this.playerdata_list_pos[2] = 0\r\n  //       this.playerdata_list_pos[3] = 1\r\n  //       this.playerdata_list_pos[1] = 2\r\n  //       break\r\n  //     case 3:\r\n  //       this.playerdata_list_pos[3] = 0\r\n  //       this.playerdata_list_pos[1] = 1\r\n  //       this.playerdata_list_pos[2] = 2\r\n  //       break\r\n  //     default:\r\n  //       break\r\n  //   }\r\n  // },\r\n  // 添加玩家节点\r\n  addPlayerNode(player_data) {\r\n    var index = player_data.seatindex\r\n    var playernode_inst = cc.instantiate(this.player_node_prefabs)\r\n    playernode_inst.parent = this.players_seat_pos.children[index]\r\n    // playernode_inst.parent = this.node\r\n    //创建的节点存储在gamescene的列表中\r\n    this.playerNodeList.push(playernode_inst)\r\n\r\n    //玩家在room里的位置索引(逻辑位置)\r\n    // playernode_inst.position = this.players_seat_pos.children[index].position\r\n    playernode_inst.getComponent(\"player_node\").init_data(player_data, index)\r\n\r\n    // myglobal.playerData.playerList[index] = player_data\r\n  },\r\n\r\n  /*\r\n   //通过userId获取用户出牌放在gamescend的位置 \r\n   做法：先放3个节点在gameacene的场景中 cardsoutzone(012)\r\n  */\r\n  getUserOutCardPosByAccount(userId) {\r\n    for (var i = 0; i < this.playerNodeList.length; i++) {\r\n      var node = this.playerNodeList[i]\r\n      if (node) {\r\n        //获取节点绑定的组件\r\n        var node_script = node.getComponent(\"player_node\")\r\n        //如果accountid和player_node节点绑定的accountid相同\r\n        //接获取player_node的子节点\r\n        if (node_script.userId === userId) {\r\n          var seat_node = this.players_seat_pos.children[node_script.seat_index].getChildByName('cardsoutzone')\r\n          return seat_node\r\n        }\r\n      }\r\n    }\r\n    return null\r\n  },\r\n  /**\r\n    * @description 通过userId获取玩家头像节点 \r\n    * @param {String} userId \r\n    * @returns {cc.Node} 玩家节点\r\n    */\r\n  getUserNodeByAccount(userId) {\r\n    for (let i = 0; i < this.playerNodeList.length; i++) {\r\n      const node = this.playerNodeList[i]\r\n      if (node) {\r\n        //获取节点绑定的组件\r\n        const playerNode = node.getComponent(\"player_node\")\r\n        if (playerNode.userId === userId) return playerNode\r\n      }\r\n    }\r\n    return null\r\n  }\r\n});\r\n","import myglobal from \"../mygolbal.js\"\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    btn_ready: cc.Node, // 准备\r\n    // btn_gamestart: cc.Node, // 开始\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  onLoad() {\r\n\r\n    // this.btn_gamestart.active = false\r\n\r\n    //监听本地的发送的消息\r\n    // this.node.on(\"init\", function () {\r\n    //   console.log(\"game beforeui init\")\r\n    //   console.log(\"myglobal.playerData.housemanageid\" + myglobal.playerData.housemanageid)\r\n    //   console.log(\"myglobal.playerData.userId\" + myglobal.playerData.userId)\r\n    //   if (myglobal.playerData.housemanageid == myglobal.playerData.userId) {\r\n    //     //自己就是房主\r\n    //     this.btn_gamestart.active = true\r\n    //     this.btn_ready.active = false\r\n    //   } else {\r\n    //     this.btn_gamestart.active = false\r\n    //     this.btn_ready.active = true\r\n    //   }\r\n    // }.bind(this))\r\n\r\n    //监听服务器发送来的消息\r\n    // myglobal.socket.onGameStart(function(){\r\n    //     console.log(\"gamebrforeUI onGameStart revice\")\r\n    //     this.node.active = false\r\n    // }.bind(this))\r\n\r\n    // myglobal.socket.onChangeHouseManage(function (data) {\r\n    //   console.log(\"gamebrforeUI onChangeHouseManage revice\" + JSON.stringify(data))\r\n    //   myglobal.playerData.housemanageid = data\r\n    //   if (myglobal.playerData.housemanageid == myglobal.playerData.userId) {\r\n    //     //自己就是房主\r\n    //     this.btn_gamestart.active = true\r\n    //     this.btn_ready.active = false\r\n    //   } else {\r\n    //     this.btn_gamestart.active = false\r\n    //     this.btn_ready.active = true\r\n    //   }\r\n\r\n    // }.bind(this))\r\n  },\r\n\r\n  start() {\r\n\r\n  },\r\n\r\n  // update (dt) {},\r\n\r\n  onButtonClick(event, customData) {\r\n    switch (customData) {\r\n      case \"btn_ready\":\r\n        console.log(\"btn_ready\")\r\n        // myglobal.socket.requestReady()\r\n        this.btn_ready.active = false\r\n        break\r\n      case \"btn_start\":\r\n        // if(isopen_sound){\r\n        //    cc.audioEngine.play(cc.url.raw(\"resources/sound/start_a.ogg\")) \r\n        //  }\r\n        console.log(\"btn_start\")\r\n        myglobal.socket.requestStart(function (err, data) {\r\n          if (err != 0) {\r\n            console.log(\"requestStart err\" + err)\r\n          } else {\r\n            console.log(\"requestStart data\" + JSON.stringify(data))\r\n\r\n          }\r\n        })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n});\r\n","import myglobal from \"../mygolbal.js\"\r\nconst ddzConstants = require('ddzConstants')\r\nconst ddzData = require('ddzData')\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    gameingUI: cc.Node,\r\n    card_prefab: cc.Prefab,\r\n    robUI: cc.Node, // 抢地主按钮节点\r\n    timeLabel: cc.Label, // 计时器节点\r\n    cardsNode: cc.Node, // 扑克节点\r\n    bottom_card_pos_node: cc.Node, // 底牌节点\r\n    playingUI_node: cc.Node, // 出牌提示节点\r\n    tipsLabel: cc.Label, //玩家出牌不合法的tips\r\n    loseNode: cc.Node, // 失败特效节点\r\n    winNode: cc.Node, // 胜利特效节点\r\n    fapaiAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    jiaodizhuAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    buqiangAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    cardsAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    buyaoAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    chupaiAudio: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    }\r\n  },\r\n\r\n  onLoad() {\r\n    //自己牌列表 \r\n    this.cards_nods = []\r\n    this.card_width = 0\r\n    //当前可以抢地主的accountid\r\n    // this.rob_player_accountid = 0\r\n    //发牌动画是否结束\r\n    // this.fapai_end = false\r\n    //底牌数组\r\n    this.bottom_card = []\r\n    //底牌的json对象数据\r\n    this.bottom_card_data = []\r\n    this.choose_card_data = []\r\n    this.outcar_zone = []\r\n\r\n    this.push_card_tmp = []\r\n    //监听服务器可以出牌消息\r\n    // myglobal.socket.onCanChuCard(function (data) {\r\n    //   console.log(\"onCanChuCard\" + JSON.stringify(data))\r\n    //   //判断是不是自己能出牌\r\n    //   if (data == myglobal.playerData.userId) {\r\n    //     //先清理出牌区域\r\n    //     this.clearOutZone(myglobal.playerData.userId)\r\n    //     //先把自己出牌列表置空\r\n    //     //this.choose_card_data=[]\r\n    //     //显示可以出牌的UI\r\n    //     this.playingUI_node.active = true\r\n\r\n    //   }\r\n    // }.bind(this))\r\n\r\n    //监听服务器：其他玩家出牌消息\r\n    // myglobal.socket.onOtherPlayerChuCard(function (data) {\r\n    //   //{\"userId\":\"2357540\",\"cards\":[{\"index\":4,\"card_data\":{\"index\":4,\"value\":1,\"shape\":1}}]}\r\n    //   console.log(\"onOtherPlayerChuCard\" + JSON.stringify(data))\r\n\r\n    //   var userId = data.userId\r\n    //   var gameScene_script = this.node.parent.getComponent(\"gameScene\")\r\n    //   //获取出牌区域节点\r\n    //   var outCard_node = gameScene_script.getUserOutCardPosByAccount(userId)\r\n    //   if (outCard_node == null) {\r\n    //     return\r\n    //   }\r\n\r\n    //   var node_cards = []\r\n    //   for (var i = 0; i < data.cards.length; i++) {\r\n    //     var card = cc.instantiate(this.card_prefab)\r\n    //     card.getComponent(\"card\").showCards(data.cards[i].card_data, myglobal.playerData.userId)\r\n    //     node_cards.push(card)\r\n    //   }\r\n    //   this.appendOtherCardsToOutZone(outCard_node, node_cards, 0)\r\n    // }.bind(this))\r\n\r\n    //内部事件:显示底牌事件,data是三张底牌数据\r\n    this.node.on(\"show_bottom_card_event\", function (data) {\r\n      console.log(\"----show_bottom_card_event\", data)\r\n      this.bottom_card_data = data\r\n      for (var i = 0; i < data.length; i++) {\r\n        var card = this.bottom_card[i]\r\n        var show_data = data[i]\r\n        var call_data = {\r\n          \"obj\": card,\r\n          \"data\": show_data,\r\n        }\r\n        var run = cc.callFunc(function (target, activedata) {\r\n          var show_card = activedata.obj\r\n          var show_data = activedata.data\r\n          show_card.getComponent(\"card\").showCards(show_data)\r\n        }, this, call_data)\r\n\r\n        card.runAction(\r\n          cc.sequence(cc.rotateBy(0, 0, 180),\r\n            cc.rotateBy(0.2, 0, -90),\r\n            run,\r\n            cc.rotateBy(0.2, 0, -90),\r\n            cc.scaleBy(1, 1.2))\r\n        )\r\n      }\r\n      common.audio.PlayEffect(this.cardsAudio)\r\n      //this.node.parent.emit(\"change_room_state_event\",defines.gameState.ROOM_PLAYING)\r\n      //如果自己地主，给加上三张底牌\r\n      console.log(myglobal.playerData.userId, myglobal.playerData.masterUserId)\r\n      if (myglobal.playerData.userId === myglobal.playerData.masterUserId) {\r\n        this.scheduleOnce(this.pushThreeCard.bind(this), 0.2)\r\n      }\r\n\r\n\r\n    }.bind(this))\r\n\r\n    //注册监听一个选择牌消息 \r\n    // this.node.on(\"choose_card_event\", function (cardData) {\r\n    //   this.choose_card_data.push(cardData)\r\n    // }.bind(this))\r\n\r\n    // this.node.on(\"unchoose_card_event\", function (cardId) {\r\n    //   for (let i = 0; i < this.choose_card_data.length; i++) {\r\n    //     if (this.choose_card_data[i].index === cardId) {\r\n    //       this.choose_card_data.splice(i, 1)\r\n    //     }\r\n    //   }\r\n    // }.bind(this))\r\n  },\r\n  start() {\r\n    // 监听游戏状态\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.addListener(this.gameStateHandler, this)\r\n    }\r\n    window.$socket.on('_chooseCard', this._chooseCardNotify, this) // 选牌\r\n    window.$socket.on('_unchooseCard', this._unchooseCardNotify, this) // 取消选牌\r\n    window.$socket.on('pushcard_notify', this.pushCardNotify, this) // 发牌\r\n    window.$socket.on('canrob_notify', this.canrobNotify, this) // 抢地主\r\n    window.$socket.on('selfPlayAHandNotify', this.selfPlayAHandNotify, this) // 出牌\r\n    window.$socket.on('rootPlayAHandNotify', this.rootPlayAHandNotify, this) // 机器出牌\r\n    window.$socket.on('gameEndNotify', this.gameEndNotify, this) // 游戏结束\r\n  },\r\n  onDestroy() {\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.removeListener(this.gameStateHandler, this)\r\n    }\r\n    window.$socket.remove('_chooseCard', this)\r\n    window.$socket.remove('_unchooseCard', this)\r\n    window.$socket.remove('pushcard_notify', this)\r\n    window.$socket.remove('canrob_notify', this)\r\n    window.$socket.remove('selfPlayAHandNotify', this)\r\n    window.$socket.remove('rootPlayAHandNotify', this)\r\n    window.$socket.remove('gameEndNotify', this)\r\n  },\r\n  _chooseCardNotify(cardData) {\r\n    this.choose_card_data.push(cardData)\r\n  },\r\n  _unchooseCardNotify(cardId) {\r\n    for (let i = 0; i < this.choose_card_data.length; i++) {\r\n      if (this.choose_card_data[i].index === cardId) {\r\n        this.choose_card_data.splice(i, 1)\r\n      }\r\n    }\r\n  },\r\n  gameStateHandler(state) {\r\n    // 开始游戏 - 已准备\r\n    if (state === ddzConstants.gameState.GAMESTART) {\r\n      // 关闭胜利或失败效果\r\n      this.winNode.active = false\r\n      this.loseNode.active = false\r\n      // 清楚桌面上所有的牌\r\n      this.cards_nods = []\r\n      this.bottom_card = []\r\n      this.push_card_tmp = []\r\n      this.cardsNode.removeAllChildren()\r\n      this.bottom_card_pos_node.removeAllChildren()\r\n    }\r\n  },\r\n  pushCardNotify(data) {\r\n    this.card_data = data\r\n    this.cur_index_card = data.length - 1\r\n    this.pushCard(data)\r\n    //左边移动定时器\r\n    this.scheduleOnce(this._runactive_pushcard.bind(this), 0.3)\r\n    this.node.parent.emit(\"pushcard_other_event\")\r\n  },\r\n  //处理发牌的效果\r\n  _runactive_pushcard() {\r\n    if (this.cur_index_card < 0) {\r\n      console.log(\"pushcard end\")\r\n      //发牌动画完成，显示抢地主按钮\r\n      // this.fapai_end = true\r\n      // if (this.rob_player_accountid === myglobal.playerData.userId) {\r\n      //   this.robUI.active = true\r\n      //   this.customSchedulerOnce()\r\n      // }\r\n      if (isopen_sound) {\r\n        cc.audioEngine.stop(this.fapai_audioID)\r\n      }\r\n      //通知gamescene节点，倒计时\r\n      // var sendevent = this.rob_player_accountid\r\n      // this.node.parent.emit(\"canrob_event\", sendevent)\r\n      return\r\n    }\r\n    //原有逻辑  \r\n    // var move_node = this.cards_nods[this.cur_index_card]\r\n    // move_node.active = true\r\n    // var newx = move_node.x + (this.card_width * 0.4*this.cur_index_card) - (this.card_width * 0.4)\r\n    // var action = cc.moveTo(0.1, cc.v2(newx, -250));\r\n    // move_node.runAction(action)\r\n    // this.cur_index_card--\r\n    // this.scheduleOnce(this._runactive_pushcard.bind(this),0.3)\r\n\r\n    var move_node = this.cards_nods[this.cards_nods.length - this.cur_index_card - 1]\r\n    move_node.active = true\r\n    this.push_card_tmp.push(move_node)\r\n    this.fapai_audioID = common.audio.PlayEffect(this.fapaiAudio)\r\n    for (var i = 0; i < this.push_card_tmp.length - 1; i++) {\r\n      var move_node = this.push_card_tmp[i]\r\n      var newx = move_node.x - (this.card_width * 0.4)\r\n      var action = cc.moveTo(0.1, cc.v2(newx, -250));\r\n      move_node.runAction(action)\r\n    }\r\n\r\n    this.cur_index_card--\r\n    this.scheduleOnce(this._runactive_pushcard.bind(this), 0.3)\r\n  },\r\n  // 通知抢地主消息,显示相应的UI\r\n  canrobNotify(data) {\r\n    console.log(\"onCanRobState\", data)\r\n    //这里需要2个变量条件：自己是下一个抢地主，2发牌动画结束\r\n    // this.rob_player_accountid = data\r\n    if (data === myglobal.playerData.userId) {\r\n      this.robUI.active = true\r\n      this.customSchedulerOnce()\r\n    }\r\n  },\r\n  //开启一个定时器\r\n  customSchedulerOnce() {\r\n    this.count = 10;\r\n    const callback = function () {\r\n      if (!this.robUI.active) return\r\n      if (!this.count) {\r\n        // 在第六次执行回调时取消这个计时器\r\n        this.robUI.active = false\r\n        this.unschedule(callback)\r\n        window.$socket.emit('canrob_state_notify', {\r\n          userId: myglobal.playerData.userId,\r\n          state: qian_state.buqiang,\r\n        })\r\n        common.audio.PlayEffect(this.buqiangAudio)\r\n      }\r\n      this.timeLabel.string = --this.count\r\n    }\r\n    this.schedule(callback, 1, 10)\r\n  },\r\n  /**\r\n   * @description 出牌\r\n   */\r\n  selfPlayAHandNotify() {\r\n    // 先清理出牌区域\r\n    this.clearOutZone(myglobal.playerData.userId)\r\n    // 显示可以出牌的UI\r\n    this.playingUI_node.active = true\r\n  },\r\n  // 机器出牌\r\n  rootPlayAHandNotify({ userId, cards }) {\r\n    var gameScene_script = this.node.parent.getComponent(\"gameScene\")\r\n    //获取出牌区域节点\r\n    var outCard_node = gameScene_script.getUserOutCardPosByAccount(userId)\r\n    if (!outCard_node) return\r\n    outCard_node.removeAllChildren(true);\r\n\r\n    var node_cards = []\r\n    for (var i = 0; i < cards.length; i++) {\r\n      var card = cc.instantiate(this.card_prefab)\r\n      card.getComponent(\"card\").showCards(cards[i], userId)\r\n      node_cards.push(card)\r\n    }\r\n    const delay = common.random(0, 10)\r\n    const playerNode = gameScene_script.getUserNodeByAccount(userId)\r\n    if (!playerNode) return\r\n    playerNode.schedulerOnce(() => {\r\n      this.appendOtherCardsToOutZone(outCard_node, node_cards, 0)\r\n      playerNode.subtractCards(cards.length)\r\n      // 通知服务，下一家出牌\r\n      window.$socket.emit('nextPlayerNotify', userId)\r\n    }, delay)\r\n  },\r\n  // 游戏结束\r\n  gameEndNotify({ isWin, otherPlayerCards }) {\r\n    console.log('游戏结束', { isWin, otherPlayerCards })\r\n    if (isWin) {\r\n      this.winNode.active = true\r\n    } else {\r\n      this.loseNode.active = true\r\n    }\r\n    ddzData.gameState = ddzConstants.gameState.WAITREADY\r\n  },\r\n  //对牌排序\r\n  sortCard() {\r\n    this.cards_nods.sort(function (x, y) {\r\n      var a = x.getComponent(\"card\").card_data;\r\n      var b = y.getComponent(\"card\").card_data;\r\n\r\n      if (a.hasOwnProperty('value') && b.hasOwnProperty('value')) {\r\n        return b.value - a.value;\r\n      }\r\n      if (a.hasOwnProperty('king') && !b.hasOwnProperty('king')) {\r\n        return -1;\r\n      }\r\n      if (!a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n        return 1;\r\n      }\r\n      if (a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n        return b.king - a.king;\r\n      }\r\n    })\r\n    //这里使用固定坐标，因为取this.cards_nods[0].xk可能排序为完成，导致x错误\r\n    //所以做1000毫秒的延时\r\n    var x = this.cards_nods[0].x;\r\n    var timeout = 1000\r\n    setTimeout(function () {\r\n      //var x = -417.6 \r\n      console.log(\"sort x:\" + x)\r\n      for (let i = 0; i < this.cards_nods.length; i++) {\r\n        var card = this.cards_nods[i];\r\n        card.zIndex = i; //设置牌的叠加次序,zindex越大显示在上面\r\n        card.x = x + card.width * 0.4 * i;\r\n      }\r\n    }.bind(this), timeout);\r\n  },\r\n  pushCard(data) {\r\n    if (data) {\r\n      data.sort(function (a, b) {\r\n        if (a.hasOwnProperty('value') && b.hasOwnProperty('value')) {\r\n          return b.value - a.value;\r\n        }\r\n        if (a.hasOwnProperty('king') && !b.hasOwnProperty('king')) {\r\n          return -1;\r\n        }\r\n        if (!a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n          return 1;\r\n        }\r\n        if (a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n          return b.king - a.king;\r\n        }\r\n      });\r\n    }\r\n    //创建card预制体\r\n    this.cards_nods = []\r\n    for (var i = 0; i < 17; i++) {\r\n\r\n      var card = cc.instantiate(this.card_prefab)\r\n      card.scale = 0.8\r\n      // card.parent = this.node.parent\r\n      card.parent = this.cardsNode\r\n      card.x = card.width * 0.4 * (-0.5) * (-16) + card.width * 0.4 * 0;\r\n      //这里实现为，每发一张牌，放在已经发的牌最后，然后整体移动\r\n      card.y = -250\r\n      card.active = false\r\n\r\n      card.getComponent(\"card\").showCards(data[i], myglobal.playerData.userId)\r\n      //存储牌的信息,用于后面发牌效果\r\n      this.cards_nods.push(card)\r\n      this.card_width = card.width\r\n    }\r\n    //创建3张底牌\r\n    this.bottom_card = []\r\n    for (var i = 0; i < 3; i++) {\r\n      var di_card = cc.instantiate(this.card_prefab)\r\n      di_card.scale = 0.4\r\n      // di_card.position = this.bottom_card_pos_node.position\r\n      //三张牌，中间坐标就是bottom_card_pos_node节点坐标，\r\n      //0,和2两张牌左右移动windth*0.4\r\n      if (i == 0) {\r\n        di_card.x = di_card.x - di_card.width * 0.5\r\n      } else if (i == 2) {\r\n        di_card.x = di_card.x + di_card.width * 0.5\r\n      }\r\n      //di_card.x = di_card.width-i*di_card.width-20\r\n      //di_card.y=60\r\n      // di_card.parent = this.node.parent\r\n      di_card.parent = this.bottom_card_pos_node\r\n      //存储在容器里\r\n      this.bottom_card.push(di_card)\r\n    }\r\n  },\r\n  //给玩家发送三张底牌后，过1s,把牌设置到y=-250位置效果\r\n  schedulePushThreeCard() {\r\n    for (var i = 0; i < this.cards_nods.length; i++) {\r\n      var card = this.cards_nods[i]\r\n      if (card.y == -230) {\r\n        card.y = -250\r\n      }\r\n    }\r\n    this.updateCards()\r\n  },\r\n  //给地主发三张排，并显示在原有牌的后面\r\n  pushThreeCard() {\r\n    //每张牌的其实位置 \r\n    var last_card_x = this.cards_nods[this.cards_nods.length - 1].x\r\n    for (var i = 0; i < this.bottom_card_data.length; i++) {\r\n      var card = cc.instantiate(this.card_prefab)\r\n      card.scale = 0.8\r\n      // card.parent = this.node.parent\r\n      card.parent = this.cardsNode\r\n\r\n      card.x = last_card_x + ((i + 1) * this.card_width * 0.4)\r\n      card.y = -230  //先把底盘放在-230，在设置个定时器下移到-250的位置\r\n\r\n      //console.log(\"pushThreeCard x:\"+card.x)\r\n      card.getComponent(\"card\").showCards(this.bottom_card_data[i], myglobal.playerData.userId)\r\n      card.active = true\r\n      this.cards_nods.push(card)\r\n    }\r\n    this.sortCard()\r\n    //设置一个定时器，在2s后，修改y坐标为-250\r\n    this.scheduleOnce(this.schedulePushThreeCard.bind(this), 2)\r\n  },\r\n\r\n  destoryCard(userId, choose_card) {\r\n    if (!choose_card.length) return\r\n    /*出牌逻辑\r\n      1. 将选中的牌 从父节点中移除\r\n      2. 从this.cards_nods 数组中，删除 选中的牌 \r\n      3. 将 “选中的牌” 添加到出牌区域\r\n          3.1 清空出牌区域\r\n          3.2 添加子节点\r\n          3.3 设置scale\r\n          3.4 设置position\r\n      4.  重新设置手中的牌的位置  this.updateCards();\r\n    */\r\n    //1/2步骤删除自己手上的card节点 \r\n    var destroy_card = []\r\n    for (var i = 0; i < choose_card.length; i++) {\r\n      for (var j = 0; j < this.cards_nods.length; j++) {\r\n        var caardIndex = this.cards_nods[j].getComponent(\"card\").caardIndex\r\n        if (caardIndex == choose_card[i].index) {\r\n          //this.cards_nods[j].destroy()\r\n          this.cards_nods[j].removeFromParent(true);\r\n          destroy_card.push(this.cards_nods[j])\r\n          this.cards_nods.splice(j, 1)\r\n        }\r\n      }\r\n    }\r\n    this.appendCardsToOutZone(userId, destroy_card)\r\n    this.updateCards()\r\n  },\r\n\r\n  //清除显示出牌节点全部子节点(就是把出牌的清空)\r\n  clearOutZone(userId) {\r\n    var gameScene_script = this.node.parent.getComponent(\"gameScene\")\r\n    var outCard_node = gameScene_script.getUserOutCardPosByAccount(userId)\r\n    var children = outCard_node.children;\r\n    for (var i = 0; i < children.length; i++) {\r\n      var card = children[i];\r\n      card.destroy()\r\n    }\r\n    outCard_node.removeAllChildren(true);\r\n  },\r\n  //对出的牌做排序\r\n  pushCardSort(cards) {\r\n    if (cards.length == 1) {\r\n      return\r\n    }\r\n    cards.sort(function (x, y) {\r\n      var a = x.getComponent(\"card\").card_data;\r\n      var b = y.getComponent(\"card\").card_data;\r\n\r\n      if (a.hasOwnProperty('value') && b.hasOwnProperty('value')) {\r\n        return b.value - a.value;\r\n      }\r\n      if (a.hasOwnProperty('king') && !b.hasOwnProperty('king')) {\r\n        return -1;\r\n      }\r\n      if (!a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n        return 1;\r\n      }\r\n      if (a.hasOwnProperty('king') && b.hasOwnProperty('king')) {\r\n        return b.king - a.king;\r\n      }\r\n    })\r\n  },\r\n  /**\r\n   * @description 桌面添加新牌\r\n   * @param {cc.Node} outCard_node 玩家出牌区域节点\r\n   * @param {List} cards 牌型节点集合\r\n   * @param {Number} yoffset 移动距离\r\n   */\r\n  appendOtherCardsToOutZone(outCard_node, cards, yoffset) {\r\n    if (!cards.length) {\r\n      common.audio.PlayEffect(this.buyaoAudio)\r\n      return\r\n    }\r\n    common.audio.PlayEffect(this.chupaiAudio)\r\n    //添加新的子节点\r\n    for (var i = 0; i < cards.length; i++) {\r\n      var card = cards[i];\r\n      outCard_node.addChild(card, 100 + i) //第二个参数是 zorder,保证牌不能被遮住\r\n    }\r\n    //对出牌进行排序\r\n    //设置出牌节点的坐标\r\n    var zPoint = cards.length / 2;\r\n    for (var i = 0; i < cards.length; i++) {\r\n      var cardNode = outCard_node.getChildren()[i]\r\n      var x = (i - zPoint) * 30;\r\n      var y = cardNode.y + yoffset; //因为每个节点需要的Y不一样，做参数传入\r\n      cardNode.setScale(0.5, 0.5);\r\n      cardNode.setPosition(x, y);\r\n    }\r\n  },\r\n  //将 “选中的牌” 添加到出牌区域\r\n  //destroy_card是玩家本次出的牌\r\n  appendCardsToOutZone(userId, destroy_card) {\r\n    if (!destroy_card.length) return\r\n    //先给本次出的牌做一个排序\r\n    this.pushCardSort(destroy_card)\r\n    var gameScene_script = this.node.parent.getComponent(\"gameScene\")\r\n    //获取出牌区域节点\r\n    var outCard_node = gameScene_script.getUserOutCardPosByAccount(userId)\r\n    this.appendOtherCardsToOutZone(outCard_node, destroy_card, 360)\r\n    //sconsole.log(\"OutZone:\"+outCard_node.name)\r\n  },\r\n\r\n  //重新排序手上的牌,并移动\r\n  updateCards() {\r\n    var zeroPoint = this.cards_nods.length / 2;\r\n    //var last_card_x = this.cards_nods[this.cards_nods.length-1].x\r\n    for (var i = 0; i < this.cards_nods.length; i++) {\r\n      var cardNode = this.cards_nods[i]\r\n      var x = (i - zeroPoint) * (this.card_width * 0.4) + 50;\r\n      cardNode.setPosition(x, -250);\r\n    }\r\n  },\r\n\r\n  playPushCardSound(card_name) {\r\n    console.log(\"playPushCardSound:\" + card_name)\r\n    if (card_name == \"\") return\r\n    switch (card_name) {\r\n      case CardsValue.one.name:\r\n        break\r\n      case CardsValue.double.name:\r\n        if (isopen_sound) {\r\n          cc.audioEngine.play(cc.url.raw(\"resources/sound/duizi.mp3\"))\r\n        }\r\n        break\r\n    }\r\n  },\r\n  // update (dt) {},\r\n  onButtonClick(event, customData) {\r\n    switch (customData) {\r\n      case \"btn_qiandz\":\r\n        console.log(\"btn_qiandz\")\r\n        // myglobal.socket.requestRobState(qian_state.qiang)\r\n        window.$socket.emit('canrob_state_notify', {\r\n          userId: myglobal.playerData.userId,\r\n          state: qian_state.qiang,\r\n        })\r\n        this.robUI.active = false\r\n        common.audio.PlayEffect(this.jiaodizhuAudio)\r\n        break\r\n      case \"btn_buqiandz\":\r\n        console.log(\"btn_buqiandz\")\r\n        // myglobal.socket.requestRobState(qian_state.buqiang)\r\n        window.$socket.emit('canrob_state_notify', {\r\n          userId: myglobal.playerData.userId,\r\n          state: qian_state.buqiang,\r\n        })\r\n        this.robUI.active = false\r\n        common.audio.PlayEffect(this.buqiangAudio)\r\n        break\r\n      case \"nopushcard\":  //不出牌\r\n        // myglobal.socket.request_buchu_card([], null)\r\n        window.$socket.emit('nextPlayerNotify', myglobal.playerData.userId)\r\n        common.audio.PlayEffect(this.buyaoAudio)\r\n        this.choose_card_data = []\r\n        this.cards_nods.map(node => node.emit(\"reset_card_flag\"))\r\n        this.playingUI_node.active = false\r\n        break\r\n      case \"pushcard\":   //出牌\r\n        //先获取本次出牌数据\r\n        if (this.choose_card_data.length == 0) {\r\n          this.tipsLabel.string = \"请选择牌!\"\r\n          setTimeout(function () {\r\n            this.tipsLabel.string = \"\"\r\n          }.bind(this), 2000);\r\n        }\r\n        window.$socket.emit('playAHandNotify', {\r\n          userId: myglobal.playerData.userId,\r\n          cards: this.choose_card_data,\r\n        }, ({state}) => {\r\n          if (state === 1) {\r\n            this.destoryCard(myglobal.playerData.userId, this.choose_card_data)\r\n            this.playingUI_node.active = false\r\n          } else {\r\n            //出牌失败，把选择的牌归位\r\n            this.cards_nods.map(node => node.emit(\"reset_card_flag\"))\r\n            // for (let i = 0; i < this.cards_nods.length; i++) {\r\n            //   this.cards_nods[i].emit(\"reset_card_flag\")\r\n            // }\r\n          }\r\n          this.choose_card_data = []\r\n        })\r\n        // myglobal.socket.request_chu_card(this.choose_card_data, function (err, data) {\r\n        //   if (err) {\r\n        //     console.log(\"request_chu_card:\" + err)\r\n        //     console.log(\"request_chu_card\" + JSON.stringify(data))\r\n        //     if (this.tipsLabel.string == \"\") {\r\n        //       this.tipsLabel.string = data.msg\r\n        //       setTimeout(function () {\r\n        //         this.tipsLabel.string = \"\"\r\n        //       }.bind(this), 2000);\r\n        //     }\r\n        //     //出牌失败，把选择的牌归位\r\n        //     for (var i = 0; i < this.cards_nods.length; i++) {\r\n        //       var card = this.cards_nods[i]\r\n        //       card.emit(\"reset_card_flag\")\r\n        //     }\r\n        //     this.choose_card_data = []\r\n        //   } else {\r\n        //     //出牌成功\r\n        //     console.log(\"resp_chu_card data:\" + JSON.stringify(data))\r\n        //     this.playingUI_node.active = false\r\n        //     //播放出牌的声音\r\n        //     //resp_chu_card data:{\"account\":\"2519901\",\"msg\":\"sucess\",\"cardvalue\":{\"name\":\"Double\",\"value\":1}}\r\n        //     //{\"type\":\"other_chucard_notify\",\"result\":0,\"data\":{\"userId\":\"2519901\",\"cards\":[{\"index\":24,\"card_data\":{\"index\":24,\"value\":6,\"shape\":1}},{\"index\":26,\"card_data\":{\"index\":26,\"value\":6,\"shape\":3}}]},\"callBackIndex\":0}\r\n        //     this.playPushCardSound(data.cardvalue.name)\r\n        //     this.destoryCard(data.account, this.choose_card_data)\r\n        //     this.choose_card_data = []\r\n        //   }\r\n        // }.bind(this))\r\n        break\r\n      case \"tipcard\":\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n});\r\n","import myglobal from \"../mygolbal.js\"\r\n\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    nickname_label: cc.Label,\r\n    headimage: cc.Sprite,\r\n    gobal_count: cc.Label,\r\n    creatroom_prefabs: cc.Prefab,\r\n    joinroom_prefabs: cc.Prefab,\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  onLoad() {\r\n    this.nickname_label.string = myglobal.playerData.userName\r\n  },\r\n\r\n  start() {\r\n\r\n  },\r\n\r\n  // update (dt) {},\r\n\r\n  onButtonClick(event, customData) {\r\n    switch (customData) {\r\n      case \"create_room\":\r\n        var creator_Room = cc.instantiate(this.creatroom_prefabs)\r\n        creator_Room.parent = this.node\r\n        creator_Room.zIndex = 100\r\n        break\r\n      case \"join_room\":\r\n        var join_Room = cc.instantiate(this.joinroom_prefabs)\r\n        join_Room.parent = this.node\r\n        join_Room.zIndex = 100\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  },\r\n  onBtnJingdian() {\r\n    const creator_Room = cc.instantiate(this.creatroom_prefabs)\r\n    creator_Room.parent = this.node\r\n    creator_Room.zIndex = 100\r\n  },\r\n  onBtnLaizi() {\r\n    alert('暂未开放')\r\n  }\r\n});\r\n","import myglobal from \"../../mygolbal.js\"\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    \r\n    properties: {\r\n      joinids:{\r\n          type: cc.Label,\r\n          default:[],\r\n      }\r\n    \r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.joinid = \"\";\r\n        this.cur_input_count = -1\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    //  update (dt) {\r\n        \r\n    //  },\r\n\r\n    onButtonClick(event,customData){\r\n        if(customData.length===1){\r\n            this.joinid += customData\r\n            this.cur_input_count += 1\r\n            this.joinids[this.cur_input_count].string = customData\r\n            //console.log(\"joinid.length:\"+this.joinid.length)\r\n            if(this.joinid.length>=6){\r\n                //判断加入房间逻辑\r\n                var room_para = {\r\n                    roomId:this.joinid,\r\n                }\r\n                myglobal.socket.request_jion(room_para,function(err,result){\r\n                    if (err){\r\n                        console.log(\"err\"+ err)\r\n                    }else{\r\n                        console.log(\"join room sucess\"+JSON.stringify(result))\r\n                        myglobal.playerData.bottom = result.bottom\r\n                        myglobal.playerData.rate = result.rate\r\n                        cc.director.loadScene(\"gameScene\")\r\n                    }\r\n                })\r\n                return\r\n            }\r\n\r\n            console.log(\"customData:\"+ customData)\r\n            \r\n        }\r\n        switch(customData){\r\n            case \"back\":\r\n                if(this.cur_input_count<0){\r\n                    return\r\n                }\r\n                this.joinids[this.cur_input_count].string = \"\"\r\n                this.cur_input_count -=1\r\n                this.joinid = this.joinid.substring(0,this.joinid.length-1)\r\n                break\r\n            case \"clear\":\r\n                for(var i=0;i<6;++i){\r\n                    this.joinids[i].string = \"\"\r\n                    \r\n                }\r\n                this.joinid = \"\"\r\n                this.cur_input_count = -1\r\n                break                            \r\n            case \"close\":\r\n               this.node.destroy()\r\n               break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n});\r\n","import myglobal from \"../mygolbal.js\"\r\n\r\nvar LoadingLayer = cc.Class({\r\n  extends: cc.Component,\r\n  properties: {},\r\n  __preload() {\r\n    this.init()\r\n  },\r\n  start() {\r\n  },\r\n  init() {\r\n    // 调整画布前的回调\r\n    cc.view.resizeWithBrowserSize(true);\r\n    cc.view.setResizeCallback(this.resizeCallback)\r\n    cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, this.resizeCallback);\r\n    cc.game.addPersistRootNode(this.node);\r\n    // 场景跳转\r\n    const { userId, roomId } = myglobal.playerData\r\n    console.log('userId = ', userId)\r\n    console.log('roomId = ', roomId)\r\n    if (!userId) {\r\n      cc.director.loadScene('loginScene')\r\n    } else if (!roomId) {\r\n      cc.director.loadScene('hallScene')\r\n    } else {\r\n      cc.director.loadScene('gameScene')\r\n    }\r\n  },\r\n  resizeCallback() {\r\n    var canvas = cc.find(\"Canvas\").getComponent(cc.Canvas)\r\n    var t = cc.winSize.width / canvas.designResolution.width\r\n    var n = cc.winSize.height / canvas.designResolution.height;\r\n    t < n\r\n      ? (canvas.fitWidth = !0, canvas.fitHeight = !1) : n < t\r\n        ? (canvas.fitWidth = !1, canvas.fitHeight = !0) : (canvas.fitWidth = !1, canvas.fitHeight = !1)\r\n  }\r\n});","import myglobal from \"../mygolbal.js\"\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    wait_node: cc.Node\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  onLoad() {},\r\n\r\n  start() {},\r\n  onButtonCilck(event, customData) {\r\n    switch (customData) {\r\n      case \"wx_login\":\r\n        console.log(\"wx_login request\")\r\n\r\n        //this.wait_node.active = true\r\n\r\n        myglobal.socket.request_wxLogin({\r\n          uniqueID: myglobal.playerData.uniqueID,\r\n          // userId: myglobal.playerData.userId,\r\n          userName: myglobal.playerData.userName,\r\n          avatarUrl: myglobal.playerData.avatarUrl,\r\n        }, function (err, result) {\r\n          //请求返回\r\n          //先隐藏等待UI\r\n          //this.wait_node.active = false\r\n          if (err != 0) {\r\n            console.log(\"err:\" + err)\r\n            return\r\n          }\r\n\r\n          console.log(\"login sucess\" + JSON.stringify(result))\r\n          myglobal.playerData.gobal_count = result.goldcount\r\n          cc.director.loadScene(\"hallScene\")\r\n        }.bind(this))\r\n        break\r\n      case 'guest_login':\r\n        this.wait_node.active = true\r\n        const count = Math.floor(Math.random() * 100000)\r\n        const userName = `guest_${count}`\r\n        myglobal.playerData.userId = `${count}`\r\n        myglobal.playerData.userName = userName\r\n        cc.sys.localStorage.setItem('userData', JSON.stringify(myglobal.playerData))\r\n        cc.director.loadScene(\"hallScene\")\r\n      default:\r\n        break\r\n    }\r\n  }\r\n  // update (dt) {},\r\n\r\n\r\n});\r\n","import socketctr from \"./data/socket_ctr.js\"\r\nimport playerdata from \"./data/player.js\"\r\nimport eventlister from \"./util/event_lister.js\"\r\n\r\nconst myglobal = {} || myglobal\r\nmyglobal.socket = socketctr()\r\nmyglobal.playerData = playerdata()\r\nmyglobal.eventlister = eventlister({})\r\n\r\nexport default myglobal\r\n","import myglobal from \"../../mygolbal.js\"\r\nconst ddzConstants = require('ddzConstants')\r\nconst ddzData = require('ddzData')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    headImage: cc.Sprite,\r\n    // account_label: cc.Label,\r\n    nickname_label: cc.Label,\r\n    // room_touxiang: cc.Sprite,\r\n    globalcount_label: cc.Label,\r\n    // headimage: cc.Sprite,\r\n    readyimage: cc.Node,\r\n    card_node: cc.Node, // 扑克牌节点\r\n    card_prefab: cc.Prefab,\r\n    //tips_label:cc.Label,\r\n    clockimage: cc.Node,\r\n    qiangdidzhu_node: cc.Node, //抢地主的父节点\r\n    time_label: cc.Label,\r\n    robimage_sp: cc.SpriteFrame,\r\n    robnoimage_sp: cc.SpriteFrame,\r\n    robIconSp: cc.Sprite,\r\n    robIcon_Sp: cc.Node,\r\n    robnoIcon_Sp: cc.Node,\r\n    masterIcon: cc.Node, // 地主标识节点\r\n    jiaodizhu: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    },\r\n    buqiang: {\r\n      type: cc.AudioClip,\r\n      default: null\r\n    }\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n  getGameScene() {\r\n    return cc.find('Canvas').getComponent('gameScene')\r\n  },\r\n  onLoad() {\r\n    this.readyimage.active = ddzData.gameState < ddzConstants.gameState.GAMESTART\r\n    this.masterIcon.active = false\r\n    //  准备开始\r\n    this.node.on(\"player_ready_notify\", () => {\r\n      this.readyimage.active = true\r\n    })\r\n    // 开始游戏(客户端发给客户端)\r\n    this.node.on(\"gamestart_event\", () => {\r\n      this.readyimage.active = false\r\n    })\r\n\r\n    //给其他玩家发牌事件\r\n    this.node.on(\"push_card_event\", function (event) {\r\n      if (this.seat_index === 0) return // 自己不再发牌\r\n      this.pushCard()\r\n    }.bind(this))\r\n    // this.node.on(\"playernode_rob_state_event\", function (event) {\r\n    //   // this.node.on(\"playernode_rob_state_event\", function (event) {\r\n    //   //{\"userId\":\"2162866\",\"state\":1}\r\n    //   var detail = event\r\n\r\n    //   //如果是自己在抢，需要隐藏qiangdidzhu_node节点\r\n    //   //this.userId表示这个节点挂接的userId\r\n    //   if (detail.userId == this.userId) {\r\n    //     this.qiangdidzhu_node.active = false\r\n    //   }\r\n    //   if (this.userId == detail.userId) {\r\n    //     if (detail.state == qian_state.qiang) {\r\n    //       console.log(\"this.robIcon_Sp.active = true\")\r\n    //       this.robIcon_Sp.active = true\r\n\r\n    //     } else if (detail.state == qian_state.buqiang) {\r\n    //       this.robnoIcon_Sp.active = true\r\n\r\n    //     } else {\r\n    //       console.log(\"get rob value :\" + detail.state)\r\n    //     }\r\n    //   }\r\n\r\n    // }.bind(this))\r\n\r\n    this.node.on(\"playernode_changemaster_event\", function (userId) {\r\n      this.robIcon_Sp.active = false\r\n      this.robnoIcon_Sp.active = false\r\n      if (userId !== this.userId) return\r\n      this.masterIcon.active = true\r\n      if (userId === myglobal.playerData.userId) return\r\n      const card = this.cardlist_node[0]\r\n      card && (card.getChildByName('count').getComponent(cc.Label).string = 20)\r\n    }.bind(this))\r\n\r\n    // this.node.on(\"playernode_add_three_card\",function(event){\r\n    //   var detail = event //地主的accountid\r\n    //   if(detail==this.userId){\r\n    //     //给地主发三张排\r\n\r\n    //   }\r\n    // }.bind(this))\r\n  },\r\n\r\n  start() {\r\n    // 监听游戏状态\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.addListener(this.gameStateHandler, this)\r\n    }\r\n    window.$socket.on('canrob_notify', this.canrobNotify, this) // 抢地主\r\n    window.$socket.on('gameEndNotify', this.gameEndNotify, this) // 游戏结束\r\n  },\r\n  onDestroy() {\r\n    if (!CC_EDITOR) {\r\n      ddzData.gameStateNotify.removeListener(this.gameStateHandler, this)\r\n    }\r\n    window.$socket.remove('canrob_notify', this)\r\n    window.$socket.remove('gameEndNotify', this)\r\n  },\r\n  //这里初始化房间内位置节点信息(自己和其他玩家)\r\n  //data玩家节点数据\r\n  //index玩家在房间的位置索引\r\n  init_data(data, index) {\r\n    //data:{\"userId\":\"2117836\",\"userName\":\"tiny543\",\"avatarUrl\":\"http://xxx\",\"goldcount\":1000}\r\n    this.userId = data.userId\r\n    // this.account_label.string = data.accountid\r\n    this.nickname_label.string = data.userName\r\n    this.globalcount_label.string = data.goldcount\r\n    this.cardlist_node = []\r\n    this.seat_index = index\r\n    //这里根据传入的avarter来获取本地图像\r\n    var head_image_path = \"UI/headimage/\" + data.avatarUrl\r\n    cc.loader.loadRes(head_image_path, cc.SpriteFrame, function (err, spriteFrame) {\r\n      if (err) {\r\n        console.log(err.message || err);\r\n        return;\r\n      }\r\n      this.headImage.spriteFrame = spriteFrame;\r\n    }.bind(this));\r\n    if (!index) {\r\n      this.readyimage.active = false\r\n      return\r\n    }\r\n    // 更改右边机器人的扑克牌位置\r\n    if (index === 1) {\r\n      this.card_node.x = -this.card_node.x\r\n    }\r\n  },\r\n  gameStateHandler(state) {\r\n    // 开始游戏 - 已准备\r\n    if (state === ddzConstants.gameState.GAMESTART) {\r\n      // const cards = this.cardlist_node\r\n      // for (let i = 0; i < cards.length; i++) {\r\n      //   if (!cards[i]) break\r\n      //   cards[i].destroy()\r\n      //   cards.splice(i, 1)\r\n      // }\r\n      this.cardlist_node = []\r\n      this.card_node.removeAllChildren()\r\n      this.clearOutZone()\r\n      this.masterIcon.active = false // 隐藏地主标识 \r\n    }\r\n  },\r\n  // 抢地主通知\r\n  canrobNotify(landlordId) {\r\n    if (landlordId === this.userId && landlordId !== myglobal.playerData.userId) {\r\n      this.robIcon_Sp.active = false\r\n      this.robnoIcon_Sp.active = false\r\n      const isQdz = common.random(0, 10) > 5 // 是否抢地主\r\n      this.schedulerOnce(() => {\r\n        isQdz && (this.robIcon_Sp.active = true) // 抢\r\n        !isQdz && (this.robnoIcon_Sp.active = true) // 不抢\r\n        window.$socket.emit('canrob_state_notify', {\r\n          userId: this.userId,\r\n          state: isQdz ? qian_state.qiang : qian_state.buqiang\r\n        })\r\n        common.audio.PlayEffect(isQdz ? this.jiaodizhu : this.buqiang)\r\n      })\r\n    }\r\n  },\r\n  /**\r\n   * @description 开启一个十秒的闹钟定时器\r\n   * @param {function} fn 关闭后的回调函数\r\n   * @param {Number} seconds 几秒后关闭\r\n   */\r\n  schedulerOnce(fn, seconds = common.random(0, 10)) {\r\n    this.count = 10;\r\n    this.time_label.string = this.count\r\n    this.qiangdidzhu_node.active = true\r\n    const callback = function () {\r\n      if (!this.count || (10 - seconds) === this.count) {\r\n        // 在第六次执行回调时取消这个计时器\r\n        this.qiangdidzhu_node.active = false\r\n        this.unschedule(callback)\r\n        fn && fn()\r\n      }\r\n      this.time_label.string = --this.count\r\n    }\r\n    this.schedule(callback, 1, seconds)\r\n  },\r\n  // 给机器发牌\r\n  pushCard() {\r\n    this.card_node.active = true\r\n    // for (var i = 0; i < 17; i++) {\r\n      var card = cc.instantiate(this.card_prefab)\r\n      card.scale = 0.6\r\n      card.parent = this.card_node\r\n      // var height = card.height\r\n      // card.y = (17 - 1) * 0.5 * height * 0.4 * 0.3 - height * 0.4 * 0.3 * i;\r\n      // card.x = 0\r\n      this.cardlist_node.push(card)\r\n    // }\r\n    let count = 0;\r\n    card.getChildByName('count').active = true\r\n    const callback = function () {\r\n      count === 17 && this.unschedule(callback)\r\n      card.getChildByName('count').getComponent(cc.Label).string = count\r\n      count++;\r\n    }\r\n    this.schedule(callback, 0.1, 17);\r\n  },\r\n  /**\r\n   * @description 出牌后减少手牌节点\r\n   * @param {Number} len 需要减少的节点数量\r\n   */\r\n  subtractCards(len = 0) {\r\n    if (!this.cardlist_node.length) return\r\n    const countLabel = this.cardlist_node[0].getChildByName('count').getComponent(cc.Label)\r\n    countLabel.string -= len\r\n    !Number(countLabel.string) && this.card_node.removeAllChildren()\r\n  },\r\n  // 游戏结束显示剩余牌型\r\n  gameEndNotify({otherPlayerCards}) {\r\n    const cardList = otherPlayerCards[this.userId]\r\n    const cards = this.cardlist_node\r\n    if (!cardList || this.userId === myglobal.playerData.userId) return\r\n    cardList.sort((a, b) => b.val - a.val)\r\n    for (let i = 0; i < cardList.length; i++) {\r\n      let card = cards[i]\r\n      // card.y = (17 - 1) * 0.5 * card.height * 0.4 * 0.3 - card.height * 0.4 * 0.3 * i;\r\n      if (card) {\r\n        card.getChildByName('count').getComponent(cc.Label).string = ''\r\n      } else {\r\n        card = cc.instantiate(this.card_prefab)\r\n        card.scale = 0.6\r\n        card.parent = this.card_node\r\n        cards.push(card)\r\n      }\r\n      card.getComponent(\"card\").showCards(cardList[i], this.userId)\r\n    }\r\n  },\r\n  //清除显示出牌节点全部子节点(就是把出牌的清空)\r\n  clearOutZone() {\r\n    var gameScene_script = this.getGameScene()\r\n    var outCard_node = gameScene_script.getUserOutCardPosByAccount(this.userId)\r\n    var children = outCard_node.children;\r\n    for (var i = 0; i < children.length; i++) {\r\n      var card = children[i];\r\n      card.destroy()\r\n    }\r\n    outCard_node.removeAllChildren(true);\r\n  },\r\n});\r\n","const getRandomStr = function (count) {\r\n  var str = '';\r\n  for (var i = 0; i < count; i++) {\r\n    str += Math.floor(Math.random() * 10);\r\n  }\r\n  return str;\r\n};\r\n\r\nconst playerData = function () {\r\n  const userData = JSON.parse(cc.sys.localStorage.getItem('userData'))\r\n  const [rootId1, rootId2] = [getRandomStr(5), getRandomStr(5)]\r\n  var that = userData || {\r\n    userId: '', // 用户id\r\n    userName: '', // 用户名称，guest_ 开头\r\n    roomId: '',// 游戏房间id\r\n    seatindex: 0, // 作为id\r\n    avatarUrl: 'avatar_1', // 头像\r\n    goldcount: 10000, // 金额\r\n    rootList: [\r\n      { seatindex: 1, userId: rootId1, userName: `guest_${rootId1}`, \"avatarUrl\": \"avatar_2\", \"goldcount\": getRandomStr(4) },\r\n      { seatindex: 2, userId: rootId2, userName: `guest_${rootId2}`, \"avatarUrl\": \"avatar_3\", \"goldcount\": getRandomStr(4) }\r\n    ],\r\n    masterUserId: '', // 地主id\r\n  }\r\n  // that.uniqueID = 1 + getRandomStr(6)\r\n  that.gobal_count = cc.sys.localStorage.getItem('user_count')\r\n  // that.master_accountid = 0\r\n  if (!userData) {\r\n    console.log(userData)\r\n    cc.sys.localStorage.setItem('userData', JSON.stringify(that))\r\n  }\r\n  return that;\r\n}\r\nexport default playerData\r\n","import eventlister from \"../util/event_lister.js\"\r\nwindow.$socket = eventlister({})\r\nconst socketCtr = function(){\r\n    var that = {}\r\n    var respone_map = {} \r\n    var call_index = 0\r\n\r\n    var _socket = null\r\n    // var $socket = eventlister({})\r\n    const _sendmsg = function(cmdtype,req,callindex){\r\n        _socket.emit(\"notify\",{cmd:cmdtype,data:req,callindex:callindex})\r\n    } \r\n \r\n    const _request = function(cmdtype,req,callback){\r\n        console.log(\"send cmd:\"+cmdtype+\"  \"+ JSON.stringify(req))\r\n        call_index++ \r\n        respone_map[call_index] = callback\r\n        _sendmsg(cmdtype,req,call_index)\r\n    } \r\n  \r\n        \r\n    that.initSocket = function(){\r\n        var opts = {\r\n            'reconnection':false,\r\n            'force new connection': true,\r\n            'transports':['websocket', 'polling']\r\n        }\r\n        _socket = window.io.connect(defines.serverUrl,opts);\r\n\r\n        _socket.on(\"connection\",function(){\r\n            console.log(\"connect server success!!\")\r\n          })\r\n\r\n       _socket.on(\"notify\",function(res){\r\n         console.log(\"on notify cmd:\" + JSON.stringify(res))\r\n         if(respone_map.hasOwnProperty(res.callBackIndex)){\r\n           var callback = respone_map[res.callBackIndex]\r\n           if(callback){\r\n               callback(res.result,res.data)\r\n           }\r\n          }else{\r\n           //if(res.callBackIndex!=0){\r\n           //console.log(\"not found call index\",res.callBackIndex)\r\n              \r\n               //提交一个监听的事件给监听器\r\n        //  on notify cmd:{\"type\":\"player_joinroom_notify\",\"result\":0,\"data\":\r\n        //  {\"accountid\":\"2586422\",\"userName\":\"tiny110\",\"avatarUrl\":\r\n        //  \"avatar_3\",\"goldcount\":1000,\"seatindex\":2},\"callBackIndex\":null}\r\n              //没有找到回到函数，就给事件监听器提交一个事件\r\n              var type = res.type\r\n              $socket.emit(type, res.data)\r\n          // }\r\n           \r\n         }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    that.request_wxLogin = function(req,callback){\r\n        _request(\"wxlogin\",req,callback)\r\n    }\r\n    \r\n    that.request_creatroom = function(req,callback){\r\n        _request(\"createroom_req\",req,callback)\r\n    }\r\n\r\n    that.request_jion = function(req,callback){\r\n        _request(\"joinroom_req\",req,callback)\r\n    }\r\n\r\n    that.request_enter_room = function(req,callback){\r\n        _request(\"enterroom_req\",req,callback)\r\n    }\r\n\r\n    //发送不出牌信息\r\n    that.request_buchu_card =  function(req,callback){\r\n        _request(\"chu_bu_card_req\",req,callback)\r\n    }\r\n    /*玩家出牌\r\n      需要判断: \r\n         出的牌是否符合规则\r\n         和上个出牌玩家比较，是否满足条件\r\n\r\n    */\r\n    that.request_chu_card = function(req,callback){\r\n        _request(\"chu_card_req\",req,callback)\r\n    }\r\n    //监听其他玩家进入房间消息\r\n    that.onPlayerJoinRoom = function(callback){\r\n         $socket.on(\"player_joinroom_notify\",callback)\r\n    }\r\n\r\n    that.onPlayerReady = function(callback){\r\n        $socket.on(\"player_ready_notify\",callback)\r\n    }\r\n\r\n    that.onGameStart = function(callback){\r\n        if(callback){\r\n           $socket.on(\"gameStart_notify\",callback)\r\n        }\r\n    }\r\n\r\n    that.onChangeHouseManage = function(callback){\r\n        if(callback){\r\n            $socket.on(\"changehousemanage_notify\",callback)\r\n        }\r\n    }\r\n    //发送ready消息\r\n    that.requestReady = function(){\r\n        _sendmsg(\"player_ready_notify\",{},null)\r\n    }\r\n\r\n    that.requestStart = function(callback){\r\n        _request(\"player_start_notify\",{},callback)\r\n    }\r\n\r\n    //玩家通知服务器抢地主消息\r\n    that.requestRobState = function(state){\r\n        _sendmsg(\"player_rob_notify\",state,null)\r\n    }\r\n    //服务器下发牌通知\r\n    that.onPushCards = function(callback){\r\n        if(callback){\r\n            $socket.on(\"pushcard_notify\",callback)\r\n         }\r\n    }\r\n\r\n    //监听服务器通知开始抢地主消息\r\n    that.onCanRobState = function(callback){\r\n        if(callback){\r\n            $socket.on(\"canrob_notify\",callback)\r\n         }\r\n    }\r\n\r\n    //监听服务器:通知谁抢地主操作消息\r\n    that.onRobState = function(callback){\r\n        if(callback){\r\n            $socket.on(\"canrob_state_notify\",callback)\r\n         }\r\n    }\r\n\r\n    //监听服务器:确定地主消息\r\n    that.onChangeMaster = function(callback){\r\n        if(callback){\r\n            $socket.on(\"change_master_notify\",callback)\r\n         }\r\n    }\r\n\r\n    //监听服务器:显示底牌消息\r\n    that.onShowBottomCard = function(callback){\r\n        if(callback){\r\n            $socket.on(\"change_showcard_notify\",callback)\r\n         }\r\n    }\r\n\r\n    //监听服务器:可以出牌消息\r\n    that.onCanChuCard = function(callback){\r\n        if(callback){\r\n            $socket.on(\"can_chu_card_notify\",callback)\r\n        }\r\n    }\r\n\r\n    that.onRoomChangeState = function(callback){\r\n        if(callback){\r\n            $socket.on(\"room_state_notify\",callback)\r\n        }\r\n    }\r\n\r\n    that.onOtherPlayerChuCard = function(callback){\r\n        if(callback){\r\n            $socket.on(\"other_chucard_notify\",callback)\r\n        }\r\n    }\r\n    return that\r\n}\r\n\r\nexport default socketCtr ","import myglobal from './mygolbal.js'\r\n\r\nconst common = require('common')\r\nconst ddzData = require('ddzData')\r\nconst ddzServers = require('ddzServers')\r\nconst gameRule = require('gameRule')\r\n\r\nconst start = cc.Class({\r\n  extends: cc.Component,\r\n  __preload() {\r\n    window.myglobal = window.myglobal || myglobal\r\n    window.common = window.common || common\r\n    window.G = window.G || {\r\n      gameRule: new gameRule()\r\n    }\r\n    !CC_EDITOR && ddzData.initData()\r\n    !CC_EDITOR && ddzServers.initServer()\r\n  }\r\n})\r\nmodule.extends = start\r\n","/*\r\n * This script is automatically generated by Cocos Creator and is only compatible with projects prior to v2.1.0.\r\n * You do not need to manually add this script in any other project.\r\n * If you don't use cc.Toggle in your project, you can delete this script directly.\r\n * If your project is hosted in VCS such as git, submit this script together.\r\n *\r\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 之前版本的工程，\r\n * 你无需在任何其它项目中手动添加此脚本。\r\n * 如果你的项目中没用到 Toggle，可直接删除该脚本。\r\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\r\n */\r\n\r\nif (cc.Toggle) {\r\n    // Whether the 'toggle' and 'checkEvents' events are fired when 'toggle.check() / toggle.uncheck()' is called in the code\r\n    // 在代码中调用 'toggle.check() / toggle.uncheck()' 时是否触发 'toggle' 与 'checkEvents' 事件\r\n    cc.Toggle._triggerEventInScript_check = true;\r\n}\r\n","\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        loadimage_target:cc.Node,\r\n        _isShow:false,\r\n        lblContent:cc.Label,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n        this.node.active = this._isShow;\r\n    },\r\n\r\n    update (dt) {\r\n        this.loadimage_target.rotation = this.loadimage_target.rotation - dt*45;\r\n    },\r\n\r\n    //content为label显示的内容\r\n    show(content){\r\n        this._isShow = true;\r\n        if(this.node){\r\n            this.node.active = this._isShow;   \r\n        }\r\n        if(this.lblContent){\r\n            if(content == null){\r\n                content = \"\";\r\n            }\r\n            this.lblContent.string = content;\r\n        }\r\n    },\r\n\r\n    hide(){\r\n        this._isShow = false;\r\n        if(this.node){\r\n            this.node.active = this._isShow;   \r\n        }\r\n    }\r\n\r\n});\r\n"],"file":"project.dev.js"}